{
  "hash": "1532932b9cf3f71d8255fa18b321e529",
  "result": {
    "engine": "knitr",
    "markdown": "---\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n\n# Results\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\nif (!require(\"remotes\")) install.packages(\"remotes\")\npkgs = c(\n    \"sf\",\n    \"tidyverse\",\n    \"tmap\",\n    \"apng\",\n    \"gganimate\",\n    \"kableExtra\",\n    \"lme4\",\n    \"equatiomatic\",\n    \"marginaleffects\"\n)\n\nremotes::install_cran(pkgs)\nsapply(pkgs, require, character.only = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             sf       tidyverse            tmap            apng       gganimate \n           TRUE            TRUE            TRUE            TRUE            TRUE \n     kableExtra            lme4    equatiomatic marginaleffects \n           TRUE            TRUE            TRUE            TRUE \n```\n\n\n:::\n:::\n\n\n\n\n## Loading data\n\n### Offence reports (tickets)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurban_perimeter <- st_read(\"raw_data/perimetrourbano.gpkg\") |>\n  st_transform(3116)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `PerimetroUrbano' from data source \n  `/home/juan/P1_ratruns_analysis/raw_data/perimetrourbano.gpkg' \n  using driver `GPKG'\nSimple feature collection with 3 features and 10 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -74.22358 ymin: 4.468614 xmax: -74.01206 ymax: 4.830661\nGeodetic CRS:  MAGNA-SIRGAS\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noff_sf_all <- (st_read(\"sf_network/manualtickets_clean_sf.gpkg\") |>\n                 st_transform(3116))[urban_perimeter,] |> filter(year == 2019,day_type != \"friday\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `manualtickets_clean_sf' from data source \n  `/home/juan/P1_ratruns_analysis/sf_network/manualtickets_clean_sf.gpkg' \n  using driver `GPKG'\nSimple feature collection with 395211 features and 9 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -74.21482 ymin: 4.469726 xmax: -74.01338 ymax: 4.822895\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# off_sf_all <- (st_read(\"sf_network/wwd_clean_sf.gpkg\") |>\n#                  st_transform(3116))[urban_perimeter,] |> filter(year == 2019,day_type != \"friday\")\n```\n:::\n\n\n\n\n### Network\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsf_net_exp <- st_read(\"sf_network/full_sf_network.gpkg\") |>\n  st_transform(3116)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `full_sf_network' from data source \n  `/home/juan/P1_ratruns_analysis/sf_network/full_sf_network.gpkg' \n  using driver `GPKG'\nSimple feature collection with 242294 features and 22 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: -74.441 ymin: 4.236862 xmax: -73.72583 ymax: 5.042826\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nsf_net <- sf_net_exp[urban_perimeter,]\n```\n:::\n\n\n\n\n### Centrality results\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncent_results <- read_csv(\"sf_network/hourly_cent_results.csv\",\n                       lazy = F)\n```\n:::\n\n\n\n\n## Assigning reports to the network\n\nWe need to assign the reports to the network. As we are interested in\nthe residential roads, any bi-directional road is represented in the\n`sf` object as two `LINESTRING` objects. Since we do not have\ninformation to know which specific direction the reports correspond to,\nwe will need to simplify the spatial object. Our target variable is the\nbetweenness centrality, so we are going to keep the two centrality\nvalues for each bi-directional element.\n\nFirst, we find the pairs of links with the `st_contains` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimplifed_net_indexes <- lapply(st_contains(sf_net,sf_net),\n            \\(x){\n              x[order(x)]\n}) |> unique()\n```\n:::\n\n\n\n\nEach pair is then assigned a unique id.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimp_groups <- do.call(bind_rows,\n        lapply(seq_along(simplifed_net_indexes),\n               \\(i){\n                 tibble(id = simplifed_net_indexes[[i]],\n                        pair_id = i)\n               })) |> \n  arrange(id)\n\n\nsf_net$pair_id <- simp_groups$pair_id\n```\n:::\n\n\n\n\nWe will create a subset of the `residential` and `unclassified` roads,\nand another with all other roads\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_net <- sf_net |> \n  filter(roadclass %in% c(\n    \"residential\",\n    \"unclassified\"\n    )) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmajor_net <- sf_net |> \n  filter(!roadclass %in% c(\n    \"residential\",\n    \"unclassified\"\n    )) \n```\n:::\n\n\n\n\nUsing the `pair_id` we extract the minimum, maximum and average change\nin centrality for each pair.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary_pairs <- cent_results |> \n  right_join(sf_net |>\n               st_drop_geometry() |>\n               select(edge_id,way_id,pair_id),\n            by = \"edge_id\") |> \n  # # Filtering only the links that were inverted during the network creation and standard links\n  filter(!any(str_detect(way_id,\"r$\"))|str_detect(way_id,\"r$\"),.by = pair_id) |>\n  summarise(across(diff:logreldiff.ff,\n                   list(min=min, max=max, avg = mean)),\n            .by = c(pair_id,day_type,hour))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary_pairs_dist.jct <- \n  sf_net |>\n  st_drop_geometry() |>\n  summarise(across(dist.jct,\\(x) mean(x) |> round()),\n            .by = c(pair_id))\n```\n:::\n\n\n\n\nA simplified version of the `sf` object is produced extracting the first\nelement of each pair, we will discard columns with the centrality\nmetrics from this object to avoid confusion\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# simpl_network_sf <- subset_net[vapply(simplifed_net_indexes,\\(x) x[1],numeric(1)),] |> select(lanes:component,pair_id)\n\nsimpl_network_sf <- sf_net |>\n  # # Filtering only the links that were inverted during the network creation and standard links\n  filter(!any(str_detect(way_id,\"r$\"))|str_detect(way_id,\"r$\"),\n         .by = pair_id) |>\n  slice_head(n = 1,by = pair_id) |>\n  select(lanes:component,pair_id)\n\nsimpl_subset_sf <- simpl_network_sf |> \n  filter(roadclass %in% c(\n    \"residential\",\n    \"unclassified\"\n    ))\n```\n:::\n\n\n\n\nWe are interested in the reports on residential and unclassified\nstreets. For this, we will create two buffers from the subsets created\nbefore. It is uncertain how the coordinates of each report are recorded,\nthere might be some error associated with the use of GPS devices, and\nalso, some uncertainty in the way the officers do it.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanti_buffer <- major_net |>\n  st_union() |> \n  st_buffer(10,endCapStyle = \"FLAT\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_buffer <- subset_net |> \n  st_union()  |> \n  st_buffer(20,endCapStyle = \"FLAT\")\n```\n:::\n\n\n\n\nAs some reports might be associated to the major network, we will first\nfilter reports within 10 meters from a major road, so these do not get\nwrongly assigned to a minor road.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noff_sf <- off_sf_all[anti_buffer,,op = st_disjoint]\n```\n:::\n\n\n\n\nThe offences that are assumed to happen in the minor offences are\nassumed to be within 20 meters.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nminor_offences <- off_sf[subset_buffer,,op = st_intersects]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# tmap_mode(\"view\")\ntm_shape(major_net)+\n  tm_lines(\"gray60\",col_alpha = 0.6)+\n  tm_shape(subset_buffer)+\n  tm_fill(\"blue\",fill_alpha = 0.6)+\n  tm_shape(off_sf_all|>\n                 filter(abs(hour - 9)<=1,\n                        year == 2019,\n                        day_type == \"weekday\"))+\n  tm_dots(\"yellow\")+\n  tm_shape(minor_offences)+\n  tm_dots(\"red\")+\n  tm_layout(bg.color = \"grey10\")\n```\n\n::: {.cell-output-display}\n![](3B_Analysis_WWD_allowed_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Summary\n\nTotal length of road network\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimpl_network_sf |> mutate(distance = st_length(geom,)) |> pull(distance) |> sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n6589386 [m]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsf_net |> st_drop_geometry() |>\n  filter(!str_detect(pattern = \"r\",way_id)) |> \n  mutate(roadclass = str_remove(roadclass,\"_link\")) |> \n  summarise(d_weighted = sum(d_weighted)/1e3,.by=c(roadclass)) |> \n  mutate(d_weighted = round(d_weighted),\n         roadclass = factor(roadclass,\n                            levels = c(\"trunk\",\"primary\",\"secondary\",\"tertiary\",\"residential\",\"unclassified\"),\n                            ordered = T)) |> \n  arrange(roadclass) |> \n  mutate(portion = round(d_weighted/sum(d_weighted)*100,1)) |> \n  kableExtra::kable()\n```\n\n::: {.cell-output-display}\n\n\n|roadclass    | d_weighted| portion|\n|:------------|----------:|-------:|\n|trunk        |        218|     2.0|\n|primary      |        622|     5.8|\n|secondary    |        532|     4.9|\n|tertiary     |       1348|    12.5|\n|residential  |       8023|    74.3|\n|unclassified |         58|     0.5|\n\n\n:::\n:::\n\n\n\n\n### Finding the closest element of the network\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nminor_offences$near_index <- st_nearest_feature(minor_offences,simpl_subset_sf)\nminor_offences$pair_id <- simpl_subset_sf$pair_id[minor_offences$near_index]\n```\n:::\n\n\n\n\n## Exploring BC changes in the network with WWD allowed\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_logdiff <- lapply(\n  0:23,\n  \\(h){\n    simpl_network_sf |>\n      left_join(summary_pairs,by = \"pair_id\") |> \n      # filter(hour!=3) |>\n      filter(day_type == \"weekday\", hour == h) |> \n      mutate(logdiff_max = if_else(logdiff_max == 0,1,logdiff_max)) |> \n      ggplot(aes(col =  logdiff_max, linewidth = abs(logdiff_max)))+\n      geom_sf()+\n      scale_color_steps2(mid = \"gray80\",high = \"dodgerblue2\",low = \"firebrick3\",\n                         breaks = c(-12,-8,-4,0,4,8,12),\n                         limits=c(-8,8)\n      )+\n      scale_linewidth_continuous(limits = c(0.00,12), range = c(0.01,20),trans = \"exp\")+\n      theme_void()+\n      labs(title = \"BC Changes\",\n           subtitle = paste0('Hour: ',h),\n           col = \"log \"\n      )+\n      guides(linewidth = \"none\")+\n      theme(legend.position = \"inside\",\n            legend.position.inside = c(0.1,0.8)\n            )\n    \n  }\n)\n```\n:::\n\n\n\n\n\n\n![](sf_network/anim_map_logdiff.png)\n\n## Modelling\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntime_slots <- summary_pairs |> select(day_type,hour) |> unique()\n\noffences_bool <- plyr::join_all(\n  lapply(1:nrow(time_slots),\n       \\(j,\n         h_threshold = 1){\n         summary_pairs |>\n           select(pair_id) |> \n           unique() |> \n           left_join(minor_offences |>\n           st_drop_geometry() |> \n           filter(day_type == time_slots$day_type[j],\n                  abs(hour - time_slots$hour[j])<=h_threshold) |> \n           count(pair_id),\n           by = join_by(pair_id)) |> \n           rename_with(.fn =\\(x) {paste(time_slots$day_type[j],time_slots$hour[j],sep = \"_\")},.cols = \"n\")\n       }),by = \"pair_id\") |> \n  mutate(across(-pair_id,\\(x){!is.na(x)})) |>\n  pivot_longer(-pair_id,values_to = \"offence_bool\") |>\n  separate_wider_delim(name, delim = \"_\",names = c(\"day_type\",\"hour\")) |> \n  mutate(across(hour,as.numeric))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noffences_bool |>  \n  filter(offence_bool) |> \n  count(day_type,hour) |> \n  ggplot(aes(hour,n,col = day_type,group = day_type))+\n  geom_line()+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](3B_Analysis_WWD_allowed_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_data <- (summary_pairs |>\n  inner_join(simpl_subset_sf |>\n               st_drop_geometry() |>\n               select(pair_id,way_id,oneway),\n            by = \"pair_id\")) |> \n  left_join(summary_pairs_dist.jct,by = join_by(pair_id)) |> \n  left_join(offences_bool,by = join_by(pair_id,hour,day_type))\n```\n:::\n\n\n\n\n#### Fitting global logisting regressions\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglm_models_0 <- model_data |> \n  nest(data = c(pair_id,\n                diff_min:offence_bool)) |> \n  mutate(\n    model_rel = map(data,\n                \\(.x) {\n                 glm(offence_bool ~ logdiff_max,\n                     data = .x,\n                     family = binomial(link = \"logit\"))\n                # },\n                # model_abs = map(data,\n                # \\(.x) {\n                #  glm(p ~ logdiff_max,\n                #      data = .x,\n                #      family = binomial(link = \"logit\"))\n                }\n                )\n                )\n\n\nmod_pred_0 <- glm_models_0 |> \n  mutate(predicted = map2(model_rel, data ,\\(.x,.y) {\n    tibble(logdiff_max = .y$logdiff_max,\n           offence_bool = predict(.x,\n                                  newdata = .y,\n                                  type = \"response\"))\n    })) |> \n  select(-data,-model_rel) |> \n  unnest(cols = predicted) |> \n  unite(\"id\",day_type:hour,remove = F) |> unique()\n```\n:::\n\n\n\n\nA visual of the fitted lines\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_pred_0 |> \n  ggplot(aes(x = logdiff_max,\n             y = offence_bool,\n             group = id,\n             col = hour,linetype = day_type))+\n  geom_line(alpha = 0.1)+\n  scale_y_continuous(limits = c(0,1))+\n  theme_minimal()+\n  scale_color_viridis_c(option = \"plasma\")\n```\n\n::: {.cell-output-display}\n![](3B_Analysis_WWD_allowed_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n\n### Expanding the reports to adjacent links\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid_fill_p <- expand_grid(day_type = c(\"weekday\",\"weekend\"),\n            hour = unique(minor_offences$hour)) |>\n  arrange(day_type,hour)\n\n\nexp_probs <-\n  do.call(bind_rows, lapply(\n    1:nrow(grid_fill_p),\n    # 4:5,\n    \\(i) {\n      ## Extracting the pair ids that have WWD reports at the day type-hour\n      t_pair_ids <- minor_offences |>\n        st_drop_geometry() |>\n        filter(hour == grid_fill_p$hour[i], day_type == grid_fill_p$day_type[i]) |>\n        pull(pair_id)\n      \n      \n      if (length(t_pair_ids) == 0) {\n        t_full_exp <- data.frame(\n          from_id = NA_character_,\n          to_id = NA_character_,\n          p = NA_real_,\n          hour = grid_fill_p$hour[i],\n          day_type = grid_fill_p$day_type[i]\n        )\n      } else {\n        subset_net_offence <- subset_net |>\n          mutate(offence_bool = pair_id %in% t_pair_ids)\n        \n        \n        \n        \n        fill_probs <- function(edges_df, direction = c(\"1\", \"-1\")) {\n          direction = match.arg(direction)\n          \n          if (direction == \"1\") {\n            do.call(bind_rows, lapply(1:nrow(edges_df), \\(j) {\n              subset_net_offence |>\n                st_drop_geometry() |>\n                select(from_id, to_id) |>\n                filter(to_id == edges_df$from_id[j],\n                       from_id != edges_df$to_id[j]) |>\n                mutate(p = edges_df$p[j] / n())\n            }))\n          } else {\n            do.call(bind_rows, lapply(1:nrow(edges_df), \\(j) {\n              subset_net_offence |>\n                st_drop_geometry() |>\n                select(from_id, to_id) |>\n                filter(from_id == edges_df$to_id[j],\n                       to_id != edges_df$from_id[j]) |>\n                mutate(p = edges_df$p[j] / n())\n            }))\n            \n          }\n        }\n        \n        \n        expand_reports <- function(df, max_degree = 3) {\n          check0 <- df |>\n            st_drop_geometry() |>\n            select(from_id, to_id) |>\n            mutate(p = 1)\n          \n          check <- list()\n          check[[1]] <- fill_probs(check0)\n          for (i in 2:max_degree) {\n            if (nrow(check[[i - 1]]) < 1)\n              break\n            check[[i]] <- fill_probs(check[[i - 1]])\n          }\n          \n          checkr <- list()\n          checkr[[1]] <- fill_probs(check0, direction = \"-1\")\n          for (i in 2:max_degree) {\n            if (nrow(checkr[[i - 1]]) < 1)\n              break\n            checkr[[i]] <- fill_probs(checkr[[i - 1]], direction = \"-1\")\n          }\n          \n          ckeck_df <- bind_rows(check0,\n                                do.call(bind_rows, check),\n                                do.call(bind_rows, checkr)) |>\n            summarise(across(p, max), .by = c(from_id, to_id))\n          return(ckeck_df)\n        }\n        \n        t_full_exp <- subset_net_offence |>\n          filter(offence_bool) |>\n          expand_reports() |>\n          mutate(hour = grid_fill_p$hour[i], day_type = grid_fill_p$day_type[i])\n      }\n      \n      return(t_full_exp)\n    }\n  ))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_probs <- exp_probs |>\n  drop_na(from_id, to_id) |>\n  summarise(p = max(p),\n            .by = c(day_type, hour, from_id, to_id)) |> \n  tibble()\n```\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_probs_ids <- subset_net |>\n  st_drop_geometry() |>\n  select(from_id, to_id,pair_id) |> \n  inner_join(clean_probs,\n            by = join_by(from_id, to_id)) |> \n  summarise(across(p,\\(x) max(x,na.rm = T)),\n            .by = c(day_type,hour,pair_id))\n```\n:::\n\n\n\n\nA visual check\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimpl_network_sf |> \n  left_join(clean_probs_ids |> \n              filter(day_type==\"weekday\",\n                     hour == 18),\n            by = \"pair_id\") |> \n  tm_shape()+\n  tm_lines(\"p\")\n```\n\n::: {.cell-output-display}\n![](3B_Analysis_WWD_allowed_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_data_p <- model_data |> \n  left_join(clean_probs_ids,\n  by = join_by(pair_id,hour,day_type)) |> \n  mutate(p = if_else(is.na(p),0,p))\n```\n:::\n\n\n\n\n### Analysis by sectors\n\nWe will use classification of Local Planning Units as analysis units.\nFor that purpose, we load the `gkpg` file which has been extracted from\nthe Reference map (available\n[here](https://www.ideca.gov.co/recursos/mapas/mapa-de-referencia-para-bogota-dc)).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndir.create(\"raw_data\",showWarnings = F)\n\nif(!file.exists(file.path(\"raw_data\", \"UPL_Bogota.zip\"))) {\n  u <-\n    \"https://github.com/juanfonsecaLS1/P1_ratruns_analysis/releases/download/v0/UPL_Bogota.zip\"\n  download.file(u, file.path(\"raw_data\", basename(u)), mode = \"wb\")\n  unzip(zipfile = file.path(\"raw_data\", basename(u)), exdir = \"raw_data\")\n}\n\nlpu_boundaries <- st_read(\"raw_data/MR_VR0924_UPL.gpkg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `mr_v0924_upl' from data source \n  `/home/juan/P1_ratruns_analysis/raw_data/MR_VR0924_UPL.gpkg' \n  using driver `GPKG'\nSimple feature collection with 33 features and 11 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -74.44978 ymin: 3.73103 xmax: -73.98653 ymax: 4.836779\nGeodetic CRS:  MAGNA-SIRGAS\n```\n\n\n:::\n:::\n\n\n\n\nLPU have been classified according to official sources (see this). North\nand Northwest sectors have been merged. Only urban sectors are\nconsidered.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlpu_sector <- read_csv(\"raw_data/UPL_sectors.csv\",\n                       col_types = cols(\n                         CODIGO_UPL = col_character(),\n                         Sector = col_character()\n                         ))\n\nsector_boundaries <- lpu_boundaries |> \n  left_join(lpu_sector,\n            by = \"CODIGO_UPL\") |> \n  mutate(Sector = str_remove(Sector,\"(?<=North)west\")) |> \n  group_by(Sector) |> \n  summarise(geom = st_union(geom)) |> \n  filter(Sector != \"Rural\") |> \n  st_transform(st_crs(simpl_network_sf))\n```\n:::\n\n\n\n\nThis shows\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(sector_boundaries) +\n  tm_fill(\"Sector\",\n          fill.scale = tm_scale_categorical(values = \"brewer.set3\"),\n          fill_alpha = 0.7) +\n  tm_shape(major_net) +\n  tm_lines(\"gray60\",col_alpha = .6)\n```\n\n::: {.cell-output-display}\n![](3B_Analysis_WWD_allowed_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n\n\nSpatial Join\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsector_boundaries$n_reports <- st_intersects(sector_boundaries,minor_offences) |> vapply(length,numeric(1))\nsector_boundaries\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 5 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 983791.8 ymin: 985462.7 xmax: 1007261 ymax: 1026604\nProjected CRS: MAGNA-SIRGAS / Colombia Bogota zone\n# A tibble: 5 × 3\n  Sector                                                          geom n_reports\n* <chr>                                                  <POLYGON [m]>     <dbl>\n1 Extended Centre ((999176.2 999239, 999181.3 999235.8, 999309.9 9991…      9248\n2 North           ((1000188 1026603, 1000167 1026603, 1000145 1026601…      1771\n3 South           ((999531.2 992666, 999531.2 992666.6, 999531.5 9926…      1635\n4 Southwest       ((987874.4 1006112, 987821.7 1006129, 987792.1 1006…      2303\n5 West            ((997587.8 1013425, 997573.7 1013436, 997551.7 1013…      2508\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid_off <- st_intersects(sector_boundaries,simpl_network_sf)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nminor_offences$sector <- st_intersects(minor_offences,sector_boundaries) |> vapply(\\(x) (x),numeric(1))\n\nsimpl_subset_sf$sector <- \n  simpl_subset_sf |>\n  st_centroid() |>\n  st_intersects(sector_boundaries) |>\n  vapply(\\(x) {\n    if (length(x) == 0) {\n      NA\n    } else{\n      x\n    }\n  }, numeric(1)) \n\npair_2_sector <- simpl_subset_sf |> \n  st_drop_geometry() |> \n  select(pair_id,sector)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary_sector_off <- minor_offences |> \n  st_drop_geometry() |> \n  summarise(n = n(),.by = c(day_type,hour,sector)) |> \n  arrange(day_type,hour)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(summary_sector_off,\n       aes(x = hour, y = n,col = factor(sector)))+\n  geom_line()+\n  facet_grid(day_type~.)+\n  scale_color_brewer(type = \"qual\",\n                     palette = \"Set3\")+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](3B_Analysis_WWD_allowed_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_data_p_sec <- model_data_p |> \n  left_join(pair_2_sector, by = join_by(pair_id)) |> \n  drop_na(sector)\n```\n:::\n\n\n\n\n### Creating pseudo-absences\n\nUnder the assumption that the transport police have the same number of\nofficers allocated along the day. We can assume that the sample size\n(the number of monitored roads) is the same.\n\nIn this case we will assume that 10% of the roads are constantly\nmonitored. Also, it is assumed that the allocation of officers is\nproportional to the size of the network.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_size <-  0.1\n```\n:::\n\n\n\n\nCalculating the actual sample size for each sector.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_size_sector <- model_data_p_sec |>\n  count(day_type,hour,sector,\n        name = \"n_links\") |> \n  select(sector,n_links) |> \n  unique() |> \n  mutate(sample_size = round(sample_size*n_links,-1),.keep = \"none\",.by = sector)\nsample_size_sector |> kable()\n```\n\n::: {.cell-output-display}\n\n\n| sector| sample_size|\n|------:|-----------:|\n|      1|        1380|\n|      2|        1130|\n|      3|        1710|\n|      4|        1420|\n|      5|         770|\n\n\n:::\n:::\n\n\n\n\nBased on these sample sizes, we will randomly sample different roads\nwithin the sector as pseudo-absences. Pseudo-absences are used in\necology when working with presence-only data and no actual absences are\nrecorded, for example, recording presence of exotic species.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nmodel_data_sampled <- model_data_p_sec |>  \n  nest(.by = c(day_type,hour,sector)) |> \n  left_join(sample_size_sector,by=\"sector\") |>\n  mutate(\n    n_true = map_dbl(data,\\(.x) {\n      .x |> filter(offence_bool) |> nrow()\n      }),\n    obs = map(data,\\(.x) {\n      .x |> filter(offence_bool) \n      }),\n  pseudoabs = map2(.x = data,\n                       .y = sample_size-n_true,\n                       .f = \\(.x,.y) {\n                         .x |>\n                           filter(p==0) |>\n                           slice_sample(n = .y)\n                         }\n                       ),\n  model_data = map2(.x = obs,\n                    .y = pseudoabs,\n                    .f = \\(.x,.y){\n                      bind_rows(.x,.y)\n                    })\n         ) |> \n  select(day_type:sector,n_true,sample_size,model_data) |> \n  unnest(model_data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_data_sampled_mlm <- model_data_sampled |>\n  filter(day_type == \"weekday\",between(hour,5,20)) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# saveRDS(model_data_sampled_mlm,\"model_data.RDS\")\n# model_data_sampled_mlm <- readRDS(\"model_data.RDS\") |> data.frame() |> filter()\n```\n:::\n\n\n\n\n### Fitting a multilevel model\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm0a <- glmer(offence_bool ~ (1|sector),\n            data = model_data_sampled_mlm,family = \"binomial\")\nsummary(m0a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: binomial  ( logit )\nFormula: offence_bool ~ (1 | sector)\n   Data: model_data_sampled_mlm\n\n     AIC      BIC   logLik deviance df.resid \n 91466.8  91485.9 -45731.4  91462.8   102558 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-0.8298 -0.4163 -0.3947 -0.3105  3.2206 \n\nRandom effects:\n Groups Name        Variance Std.Dev.\n sector (Intercept) 0.4312   0.6566  \nNumber of obs: 102560, groups:  sector, 5\n\nFixed effects:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  -1.5556     0.1717   -9.06   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\nm0b <- glmer(offence_bool ~ (1|hour),\n            data = model_data_sampled_mlm,family = \"binomial\")\nsummary(m0b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: binomial  ( logit )\nFormula: offence_bool ~ (1 | hour)\n   Data: model_data_sampled_mlm\n\n     AIC      BIC   logLik deviance df.resid \n 97935.0  97954.1 -48965.5  97931.0   102558 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-0.6249 -0.5429 -0.4448 -0.3477  3.1251 \n\nRandom effects:\n Groups Name        Variance Std.Dev.\n hour   (Intercept) 0.1464   0.3827  \nNumber of obs: 102560, groups:  hour, 16\n\nFixed effects:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept) -1.49099    0.09468  -15.75   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n\n\n#### Intraclass Correlation Coefficient (ICC)\n\nThe chances of having a offence report is explained by between-sector\ndifferences\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nicca <- m0a@theta[1]^2/ (m0a@theta[1]^2 + (pi^2/3))\nicca\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1158773\n```\n\n\n:::\n:::\n\n\n\n\nThe chances of having a offence report is explained by between-hour\ndifferences\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niccb <- m0b@theta[1]^2/ (m0b@theta[1]^2 + (pi^2/3))\niccb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.04261601\n```\n\n\n:::\n:::\n\n\n\n\n#### Constrained intermediate models\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCIM <- glmer(offence_bool ~ logdiff_max + (1|sector)+(1|hour),\n            data = model_data_sampled_mlm,family = \"binomial\")\n\nsummary(CIM)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: binomial  ( logit )\nFormula: offence_bool ~ logdiff_max + (1 | sector) + (1 | hour)\n   Data: model_data_sampled_mlm\n\n     AIC      BIC   logLik deviance df.resid \n 89058.3  89096.4 -44525.1  89050.3   102556 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.2476 -0.4725 -0.3549 -0.2470  5.6198 \n\nRandom effects:\n Groups Name        Variance Std.Dev.\n hour   (Intercept) 0.1866   0.4319  \n sector (Intercept) 0.4400   0.6633  \nNumber of obs: 102560, groups:  hour, 16; sector, 5\n\nFixed effects:\n             Estimate Std. Error z value Pr(>|z|)    \n(Intercept) -1.588916   0.320788  -4.953  7.3e-07 ***\nlogdiff_max  0.033155   0.002056  16.129  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr)\nlogdiff_max 0.003 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nAIMa <- glmer(offence_bool ~ logdiff_max + (1 + logdiff_max|sector)+(1|hour),\n            data = model_data_sampled_mlm,family = \"binomial\")\n\nsummary(AIMa)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: binomial  ( logit )\nFormula: offence_bool ~ logdiff_max + (1 + logdiff_max | sector) + (1 |  \n    hour)\n   Data: model_data_sampled_mlm\n\n     AIC      BIC   logLik deviance df.resid \n 88919.6  88976.8 -44453.8  88907.6   102554 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.1959 -0.4698 -0.3559 -0.2434  6.0884 \n\nRandom effects:\n Groups Name        Variance  Std.Dev. Corr \n hour   (Intercept) 0.1862829 0.43161       \n sector (Intercept) 0.4343049 0.65902       \n        logdiff_max 0.0007029 0.02651  -0.40\nNumber of obs: 102560, groups:  hour, 16; sector, 5\n\nFixed effects:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept) -1.57915    0.30874  -5.115 3.14e-07 ***\nlogdiff_max  0.04179    0.01203   3.472 0.000516 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr)\nlogdiff_max -0.363\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nAIMb <- glmer(offence_bool ~ logdiff_max + (1|sector)+(1 + logdiff_max|hour),\n            data = model_data_sampled_mlm,family = \"binomial\")\n\nsummary(AIMb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: binomial  ( logit )\nFormula: offence_bool ~ logdiff_max + (1 | sector) + (1 + logdiff_max |  \n    hour)\n   Data: model_data_sampled_mlm\n\n     AIC      BIC   logLik deviance df.resid \n 89060.8  89118.0 -44524.4  89048.8   102554 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.2354 -0.4725 -0.3548 -0.2458  5.6763 \n\nRandom effects:\n Groups Name        Variance  Std.Dev. Corr \n hour   (Intercept) 1.858e-01 0.431029      \n        logdiff_max 2.194e-05 0.004684 -0.47\n sector (Intercept) 4.395e-01 0.662910      \nNumber of obs: 102560, groups:  hour, 16; sector, 5\n\nFixed effects:\n             Estimate Std. Error z value Pr(>|z|)    \n(Intercept) -1.589128   0.305837  -5.196 2.04e-07 ***\nlogdiff_max  0.033619   0.002413  13.932  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr)\nlogdiff_max -0.074\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nAIMc <- glmer(offence_bool ~ logdiff_max + (1 + logdiff_max|sector)+(1 + logdiff_max|hour),\n            data = model_data_sampled_mlm,family = \"binomial\")\n\nsummary(AIMc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: binomial  ( logit )\nFormula: offence_bool ~ logdiff_max + (1 + logdiff_max | sector) + (1 +  \n    logdiff_max | hour)\n   Data: model_data_sampled_mlm\n\n     AIC      BIC   logLik deviance df.resid \n 88920.4  88996.7 -44452.2  88904.4   102552 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.1756 -0.4698 -0.3581 -0.2413  6.2041 \n\nRandom effects:\n Groups Name        Variance  Std.Dev. Corr \n hour   (Intercept) 1.862e-01 0.431466      \n        logdiff_max 3.459e-05 0.005882 -0.60\n sector (Intercept) 4.345e-01 0.659134      \n        logdiff_max 7.114e-04 0.026673 -0.41\nNumber of obs: 102560, groups:  hour, 16; sector, 5\n\nFixed effects:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept) -1.57931    0.31017  -5.092 3.55e-07 ***\nlogdiff_max  0.04263    0.01221   3.491 0.000481 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr)\nlogdiff_max -0.398\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(CIM,AIMa,AIMb,AIMc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nData: model_data_sampled_mlm\nModels:\nCIM: offence_bool ~ logdiff_max + (1 | sector) + (1 | hour)\nAIMa: offence_bool ~ logdiff_max + (1 + logdiff_max | sector) + (1 | hour)\nAIMb: offence_bool ~ logdiff_max + (1 | sector) + (1 + logdiff_max | hour)\nAIMc: offence_bool ~ logdiff_max + (1 + logdiff_max | sector) + (1 + logdiff_max | hour)\n     npar   AIC   BIC logLik deviance  Chisq Df Pr(>Chisq)    \nCIM     4 89058 89096 -44525    89050                         \nAIMa    6 88920 88977 -44454    88908 142.72  2  < 2.2e-16 ***\nAIMb    6 89061 89118 -44524    89049   0.00  0               \nAIMc    8 88920 88997 -44452    88904 144.39  2  < 2.2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n\n\n\nThe AIMa model is chosen considering that AIMc does not have a lower AIC and \nthe deviance do not improve significantly.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_eq(AIMa)\n```\n\n::: {.cell-output-display}\n$$\n\\begin{aligned}\n  \\operatorname{offence\\_bool}_{i}  &\\sim \\operatorname{Binomial}(n = 1, \\operatorname{prob}_{\\operatorname{offence\\_bool} = 1} = \\widehat{P}) \\\\\n    \\log\\left[\\frac{\\hat{P}}{1 - \\hat{P}} \\right] &=\\alpha_{j[i],k[i]} + \\beta_{1k[i]}(\\operatorname{\\logdiff\\_max}) \\\\    \\alpha_{j}  &\\sim N \\left(\\mu_{\\alpha_{j}}, \\sigma^2_{\\alpha_{j}} \\right)\n    \\text{, for hour j = 1,} \\dots \\text{,J} \\\\    \n\\left(\n  \\begin{array}{c} \n    \\begin{aligned}\n      &\\alpha_{k} \\\\\n      &\\beta_{1k}\n    \\end{aligned}\n  \\end{array}\n\\right)\n  &\\sim N \\left(\n\\left(\n  \\begin{array}{c} \n    \\begin{aligned}\n      &\\mu_{\\alpha_{k}} \\\\\n      &\\mu_{\\beta_{1k}}\n    \\end{aligned}\n  \\end{array}\n\\right)\n, \n\\left(\n  \\begin{array}{cc}\n     \\sigma^2_{\\alpha_{k}} & \\rho_{\\alpha_{k}\\beta_{1k}} \\\\ \n     \\rho_{\\beta_{1k}\\alpha_{k}} & \\sigma^2_{\\beta_{1k}}\n  \\end{array}\n\\right)\n \\right)\n    \\text{, for sector k = 1,} \\dots \\text{,K}\n\\end{aligned}\n$$\n\n:::\n:::\n\n\n\n\nSlope across the day\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_slopes(AIMa,\n            variables = \"logdiff_max\",\n            by = c(\"hour\"))+\n  scale_color_brewer(type = \"qual\",\n                     palette = \"Set3\")+\n  scale_fill_brewer(type = \"qual\",\n                      palette = \"Set3\")+\n  theme_minimal()+\n  scale_y_continuous(limits = c(0,0.012))+\n  labs(col = \"Sector\",\n       fill = \"Sector\")\n```\n\n::: {.cell-output-display}\n![](3B_Analysis_WWD_allowed_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nSlopes for each sector across the day 90% confidence intervals\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_slopes(AIMa,\n            variables = \"logdiff_max\",\n            by = c(\"hour\",\"sector\"),conf_level = 0.9)+\n  # scale_color_brewer(type = \"qual\",\n  #                    palette = \"Set3\")+\n  # scale_fill_brewer(type = \"qual\",\n  #                     palette = \"Set3\")+\n  theme_minimal()+\n  # scale_y_continuous(limits = c(0,0.01))+\n  labs(col = \"Sector\",\n       fill = \"Sector\")+\n  facet_wrap(sector~.)\n```\n\n::: {.cell-output-display}\n![](3B_Analysis_WWD_allowed_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "3B_Analysis_WWD_allowed_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}