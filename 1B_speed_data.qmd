---
editor: 
  markdown: 
    wrap: 72
---

# Speed Data Processing

```{r,message=FALSE}
#| label: libraries
#| message: false

options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!require("remotes")) install.packages("remotes")
pkgs = c(
    "sf",
    "tidyverse",
    "data.table",
    "paletteer"
)
remotes::install_cran(pkgs)
sapply(pkgs, require, character.only = TRUE)

setDTthreads(0)
```

# Downloading data

We obtained speed data from [Datos Abiertos Movilidad de Bogotá (Movility Open Data of Bogotá)](https://datos.movilidadbogota.gov.co/search?groupIds=71ef3e63c60749cbb89028c76558a304). However, direct download might be restricted. A copy of the original data is saved 
as a pre-release of the repository for this analysis. The following code downloads 
the necesary files:

```{r}
if(!dir.exists("raw_data/bogota")) {
  if (!file.exists("raw_data/bogota_data.zip")) {
    options(timeout = 180)
    download.file(
      "https://github.com/juanfonsecaLS1/P1_ratruns_analysis/releases/download/v0/bogota_data.zip",
      destfile = "raw_data/bogota_data.zip",
      mode = "wb"
    )
    unzip("raw_data/bogota_data.zip", exdir = "raw_data")
  }
}
```

# Loading and cleaning


```{r}
#| label: read-speed-files
#| eval: false

lst_files <- list.files("raw_data/bogota/speed_data/",pattern = "csv$",full.names = T)

all_data <- rbindlist(lapply(lst_files,fread),fill = T)[,
         c("OBJECTID",
           "FIN",
           "Shape__Length",
           "LLAVE",
           "AÑO",
           "CUARTO_HORA"):=NULL
         ]
```

## Preliminary cleaning

```{r}
#| label: tidy-year
#| eval: false

all_data[,
           INICIO := mdy_hms(INICIO,
                             tz = "America/Bogota")
         ][,
           `:=`(year = year(INICIO))
           ]
```

Not all links have data for all months. So the first step is to identify the
links with enough data per year. 

```{r}
#| label: summary-links-per-year
#| eval: false

links_summary <- unique(
  all_data[,
           c("TID","year","MES")])[,
                                   .(count = .N),
                                   by = c("TID","year")]
```

```{r}
#| label: plot-summary-links-per-year
#| eval: false

links_summary |> 
  ggplot(aes(count))+
  geom_histogram(binwidth = 1)+
  scale_y_log10()+
  scale_x_continuous(breaks = 0:12)+
  facet_grid(year~.)
```

Links with data in 5 or more months per year will be used for this analysis.

```{r}
#| label: final-links
#| eval: false

links_data = links_summary[,count := 1*(count>=5)
                           ][,.(tot_count = sum(count)),
                             by = "TID"][
                               tot_count == 2,
                               ] |> pull(TID)
```

We extract the data only for these links with the following code and
clean the memory:
```{r}
#| label: cleaning-data
#| eval: false

clean_data <- all_data[TID %in% links_data]
rm(all_data,links_data,links_summary,lst_files)
gc()
```

```{r}
#| eval: false
#| label: saving-clean-data
#| include: false

save(clean_data,file = "raw_data/selected_speeds.RData")
```


```{r}
#| label: reading-clean-data
#| include: false

load(file = "raw_data/selected_speeds.RData")
gc()
```


## Classifiying the data

First, we will identify the days that were bank holidays in Colombia

```{r}
#| label: read_bankholidays

bank_holidays <- read.csv("raw_data/bogota/bank_holidays.csv") |>
  mutate(bank_holiday = dmy(bank_holiday)) |>
  pull(bank_holiday)
```

```{r}
#| label: update-dtype

clean_data[date(INICIO) %in% bank_holidays,
           DIA_SEMANA := "Festivo"
           ]

clean_data[,day_type := fcase(
             DIA_SEMANA == "Domingo","weekend",
             DIA_SEMANA == "Sabado","weekend",
             DIA_SEMANA == "Festivo","weekend",
             DIA_SEMANA == "Viernes","friday",
             default = "weekday")
             ]
```

The following code extracts the 94th percentile of the speeds in each road link.

```{r}
#| label: calc-maxspeeds

max_speeds <- clean_data[,
                             .(p94_speed = quantile(VEL_PROMEDIO,
                                                       0.94,
                                                       na.rm = T)),
                             by =  c("TID","year")]
```

Now, we calculate the median hourly speed for each road link by day type and road link.

```{r}
#| label: calc-summary-data

summary_speeds <- clean_data[, as.list(summary(VEL_PROMEDIO)),
  by = .(TID, HORA, day_type, year)]

setnames(summary_speeds,
         old = c("HORA","Min.","1st Qu.","Median","Mean","3rd Qu.","Max."),
         new = c("hour","d_min_speed","d_q1_speed","d_median_speed","d_mean_speed","d_q3_speed","d_max_speed"))

```

Now we normalise the values by dividing by the 95th-percentile speed

```{r}
norm_summary_spd <- merge(summary_speeds,
                          max_speeds,
                          by = c("TID","year"))[,
                                                d_norm_speed := d_median_speed/p94_speed
                                                ]
```


```{r}
#| label: save-summary
#| eval: false

fwrite(norm_summary_spd,file = "sf_network/summary_speeds.csv")

```

```{r}
#| label: read-summary
#| eval: false
#| include: false

norm_summary_spd <- fread(file = "sf_network/summary_speeds.csv")

```

## Some visualisations of speed distribution:

### Hourly distributions

#### Normalised speed
```{r}
#| label: plot-norm-all

norm_summary_spd |> 
  ggplot(aes(x = hour,y = d_norm_speed))+
  geom_jitter(alpha = 0.1, size = 0.05,col = "gray60")+
  geom_boxplot(aes(group = hour), fill = NA,alpha = 0.3,outlier.shape = NA)+
  stat_summary(geom = "line",
               fun = "mean",
               aes(col = day_type),
               linewidth = 1,
               alpha = 0.6,
               show.legend = F)+
  facet_grid(day_type~year)+
  theme_minimal()+
  labs(x = "Hour",
       y = bquote("Normalised speed *"),
       caption = expression('*'~Observed~'/'~94^{'th'}~percentile))+
  scale_x_continuous(breaks = 0:23,
                     labels = sprintf("%02d:00",0:23))+
  theme(axis.text.x = element_text(angle = 90))+
  scale_colour_manual(values = paletteer_d("ggsci::lanonc_lancet",n = 3))
  
```



```{r}
norm_summary_spd |> 
  mutate(day_type = str_to_title(day_type)) |> 
  ggplot(aes(x = hour,y = d_norm_speed))+
  # geom_jitter(alpha = 0.05, size = 0.05,col = "gray80",shape =1)+
  # geom_boxplot(aes(group = hour), fill = NA,alpha = 0.3,outlier.shape = NA)+
  stat_summary(aes(fill = day_type),
               fun.data = median_hilow, fun.args = list(conf.int = 1), 
                 geom = 'ribbon', alpha = 0.15, colour = NA)+
  stat_summary(aes(fill = day_type),
               fun.data = median_hilow, fun.args = list(conf.int = 0.5), 
                 geom = 'ribbon', alpha = 0.4, colour = NA)+
  stat_summary(geom = "line",
               fun = "mean",
               aes(col = day_type),
               linewidth = 1,
               alpha = 1,
               show.legend = F)+
  facet_grid(day_type~.)+
  theme_minimal()+
  labs(x = NULL,
       y = bquote("Normalised speed *"),
       caption = expression('*'~Observed~'/'~94^{'th'}~percentile))+
  scale_x_continuous(breaks = 0:23,
                     labels = sprintf("%02d:00",0:23))+
  theme(axis.text.x = element_text(angle = 90),legend.position = "none",
        panel.grid.minor.x = element_blank())+
  scale_colour_manual(values = paletteer_d("ggsci::lanonc_lancet",n = 3))+
  scale_fill_manual(values = paletteer_d("ggsci::lanonc_lancet",n = 3))+
  scale_y_continuous(limits = c(0,1.5))
```



#### Absolute speed
```{r}
norm_summary_spd |> 
  ggplot(aes(x = hour,y = d_median_speed))+
  geom_jitter(alpha = 0.3, size = 0.3,col = "gray60")+
  geom_boxplot(aes(group = hour), fill = NA,alpha = 0.3,outlier.shape = NA)+
  stat_summary(geom = "line",
               fun = "mean",
               aes(col = day_type),
               linewidth = 1,
               alpha = 0.6,
               show.legend = F)+
  facet_grid(day_type~year)+
  theme_minimal()+
  labs(x = "Hour", y = "Observed speed")+
  scale_x_continuous(breaks = 0:23,
                     labels = sprintf("%02d:00",0:23))+
  theme(axis.text.x = element_text(angle = 90))+
  scale_colour_manual(values = paletteer_d("ggsci::lanonc_lancet",n = 3))
  
```

### Daily profile by Link

#### Normalised speed

```{r}
norm_summary_spd |> 
  ggplot(aes(x = hour,y = d_norm_speed))+
  # geom_boxplot(aes(group = HORA), fill = NA,alpha = 0.3,outlier.shape = NA)+
  # geom_jitter(alpha = 0.3, size = 0.3,col = "gray60")+
  stat_summary(geom = "line",
               fun = "mean",
               aes(col = day_type,
                   group = TID),
               linewidth = 0.01,
               alpha = 0.1,
               # show.legend = F
               )+
  facet_grid(day_type~year)+
  theme_minimal()+
  labs(x = "Hour", y = "Speed ratio (observed/94th percentile)")+
  scale_x_continuous(breaks = 0:23,
                     labels = sprintf("%02d:00",0:23))+
  scale_y_continuous(limits = c(0,1.25),breaks = seq(0,1.25,0.25))+
  scale_colour_manual(values = paletteer_d("ggsci::default_nejm",n = 3))+
  theme(axis.text.x = element_text(angle = 90),
        panel.grid.minor = element_blank(),
        legend.position = "top")
```

#### Absolute speed

```{r}
norm_summary_spd |> 
  ggplot(aes(x = hour,y = d_median_speed))+
  stat_summary(geom = "line",
               fun = "mean",
               aes(col = day_type,
                   group = TID),
               linewidth = 0.01,
               alpha = 0.1,
               # show.legend = F
               )+
  facet_grid(day_type~year)+
  geom_hline(yintercept = 60,col = "#EE4C97",linetype = "dashed",alpha = 0.6,linewidth = 1)+
  annotate(geom = "text",x = 23,y = 63,label = "Speed Limit ",vjust = 0,hjust = 1,face = "italic")+
  theme_minimal()+
  labs(x = "Hour", y = "Observed speed")+
  scale_x_continuous(breaks = 0:23,
                     labels = sprintf("%02d:00",0:23))+
  scale_y_continuous(limits = c(0,100),breaks = seq(0,100,20))+
  scale_colour_manual(values = paletteer_d("ggsci::default_nejm",n = 3))+
  theme(axis.text.x = element_text(angle = 90),
        panel.grid.minor = element_blank(),
        legend.position = "none")
```


```{r}
#| label: plot-abs-all-2019
#| eval: false
#| include: false

daily_obs_speed <- norm_summary_spd |> 
  filter(year==2019,day_type != "friday") |> 
  mutate(day_type = str_to_sentence(day_type)) |> 
  ggplot(aes(x = hour,y = d_median_speed))+
  stat_summary(geom = "line",
               fun = "median",
               aes(col = day_type,
                   group = TID),
               linewidth = 0.075,
               alpha = 0.1,
               # show.legend = F
               )+
  facet_grid(day_type~.)+
  geom_hline(yintercept = 60,col = "#EE4C97",linetype = "dashed",alpha = 0.6,linewidth = 1)+
  annotate(geom = "text",x = 23,y = 63,label = "Speed Limit ",vjust = 0,hjust = 1,size = 3)+
  theme_minimal()+
  labs(x = "Hour", y = "Observed speed (km/h)")+
  scale_x_continuous(breaks = 0:23,
                     labels = sprintf("%02d:00",0:23))+
  scale_y_continuous(limits = c(0,90),breaks = seq(0,90,20))+
  scale_colour_manual(values = paletteer_d("ggsci::lanonc_lancet",n = 3))+
  theme(axis.text.x = element_text(angle = 90),
        panel.grid.minor = element_blank(),
        legend.position = "none")


ggsave(plot = daily_obs_speed,filename = "speed_profile_obs.png",units = "cm",dpi = "retina",width = 15,height = 12)

```

Median overall speed profile 

```{r}
norm_summary_spd |> 
  ggplot(aes(x = hour,y = d_norm_speed))+
  stat_summary(geom = "line",
               fun = "mean",
               aes(col = day_type),
               linewidth = 1.5,
               alpha = 0.6,
               # show.legend = F
               )+
  facet_grid(.~year)+
  theme_minimal()+
  labs(x = "Hour", y = "Speed ratio (observed/94th percentile)")+
  scale_x_continuous(breaks = 0:23,
                     labels = sprintf("%02d:00",0:23))+
  scale_y_continuous(limits = c(0,1.25),breaks = seq(0,1.25,0.25))+
  scale_colour_manual(values = paletteer_d("ggsci::default_nejm",n = 3))+
  theme(axis.text.x = element_text(angle = 90),
        panel.grid.minor = element_blank(),
        legend.position = "top")
```

```{r}
#| label: plot-norm-all-2019
#| eval: false
#| include: false

daily_speed_plot <- norm_summary_spd |> 
  filter(year==2019,day_type != "friday") |> 
  mutate(day_type = str_to_sentence(day_type)) |>
  ggplot(aes(x = hour,
             y = d_norm_speed))+
  # geom_jitter(alpha = 0.1, size = 0.05,col = "gray60")+
  # geom_boxplot(aes(group = hour), fill = NA,alpha = 0.3,outlier.shape = NA)+
  geom_smooth(aes(fill = day_type,
             col = day_type),
              stat = 'summary',
              alpha = 0.2,
              fun.data = median_hilow,
              fun.args = list(conf.int = 0.50))+
  # stat_summary(geom = "line",
  #              fun = "median",
  #              aes(col = day_type),
  #              linewidth = 1,
  #              alpha = 0.8)+
  # facet_grid(day_type~year)+
  theme_minimal()+
  labs(x = "Hour",
       y = bquote("Normalised speed *"),
       caption = expression('*'~Observed~'/'~94^{'th'}~percentile),
       col = "",
       fill = "")+
  scale_x_continuous(breaks = 0:23,
                     labels = sprintf("%02d:00",0:23))+
  scale_y_continuous(limits = c(0,1))+
  theme(axis.text.x = element_text(angle = 90),
        legend.position = "top")+
  scale_color_manual(values = paletteer_d("ggsci::lanonc_lancet",n = 3))+
  scale_fill_manual(values = paletteer_d("ggsci::lanonc_lancet",n = 3))

ggsave(plot = daily_speed_plot,filename = "speed_profile.png",units = "cm",dpi = "retina",width = 15,height = 12)
```


## Spatial data

Up to this point, all the data processing has not involved the spatial component.
On the open data platform, it is possible to download the `gpkg` files for each
month. With the following code, we will identify which file(s) is(are) needed to have
all data.

Ideally, we need a file that contains all `r unique(clean_data$TID) |> length()` `TID`. 


```{r}
#| label: id-monthyear-max-tid

unique(
  clean_data[,
           c("TID","year","MES")])[,
                                   .(count = .N),
                                   by = c("year","MES")][count == max(count)]
```

As the file of February 2019 does not have all the links, we identify alternative files.

```{r}
#| label: id-spatial-files

tid_feb2019 <- unique(clean_data[year == 2019 & MES == "February","TID"])[,1]
tid_missing <- unique(clean_data[!(TID %in% tid_feb2019$TID),"TID"])

unique(
  clean_data[TID %in% tid_missing$TID,
           c("TID","year","MES")])[,
                                   .(count = .N),
                                   by = c("year","MES")][count == max(count)]
```

The files for February 2019 and October 2020 have been downloaded manually from
the same source. As we are only interested in the geometries, we filter out all
the other data.



```{r}
#| label: read-spatial-speeds

sf_feb2019<- st_read(
   "raw_data/bogota/speed_data/Velocidades_Bitcarrier_Febrero_2019_1361955177739874723.gpkg",
   query="select TID,SHAPE from 'Velocidades_Bitcarrier_Febrero_2019'"
   ) |>
  filter(TID %in% tid_feb2019$TID) |> select(TID) |> slice_head(n = 1,by = TID)

sf_oct2020 <- st_read(
  "raw_data/bogota/speed_data/Velocidades_Bitcarrier_Octubre_2020_-1518838627102027019.gpkg",
  query="select TID,SHAPE from 'Velocidades_Bitcarrier_Octubre_2020'") |>
  filter(TID %in% tid_missing$TID) |> slice_head(n = 1,by = TID)
```


```{r}
#| label: bind-sf-speed

sf_speed <- bind_rows(sf_feb2019,sf_oct2020)
rm(sf_feb2019,sf_oct2020)
gc()

```

The elements in the spatial objects contain `MULTILINESTRINGS` which cover long sections of the main corridors. Before saving the results, we will cast all features as `LINESTRING` to ease the process of working out a correspondence with the OSM network.

```{r}
#| label: casting-lines

sf_speed_cast <- sf_speed |> st_cast("LINESTRING")
```


Saving the network

```{r}
#| label: save-speed-network

st_write(sf_speed_cast,dsn = "sf_network/sf_speed_network.gpkg",delete_dsn = T)

```



```{r}
#| label: load-urbanper

urban_perimeter <- st_read("raw_data/perimetrourbano.gpkg")
```

A quick visualisation of the maximum speeds in 2019:

```{r}
#| label: map-max-speeds

sf_speed_cast[urban_perimeter,] |> 
  left_join(max_speeds |> filter(year==2019), by = "TID") |> 
  ggplot()+
  geom_sf(aes(col = p94_speed),linewidth = 0.3,alpha = 0.7)+
  scale_color_gradientn(colours = paletteer_c("grDevices::Plasma", 30))+
  theme_void()+
  facet_grid(.~year)

```




