---
editor: 
  markdown: 
    wrap: 72
---

# Testing changes in centrality

```{r,message=FALSE}
#| label: libraries
#| message: false

options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!require("remotes")) install.packages("remotes")
pkgs = c(
    "sf",
    "tidyverse",
    "zonebuilder",
    "tmap"
    # "dodgr" # Using the developer version of dodgr
)
remotes::install_cran(pkgs)
sapply(pkgs, require, character.only = TRUE)

require(dodgr)
```

## Loading network

```{r}
#| label: read-sf
 
sf_bogota_2019_full <- st_read(file.path("sf_network","bogota_osm_network.gpkg"),
                          layer = "network_2019") |>
  mutate(way_speed = case_when(highway %in%
                                 c("trunk_link","primary_link","primary","trunk")~"road_60",
                               TRUE ~ "road_30")) |> 
  rename(roadclass = highway) |>
  mutate(oneway.raw = oneway,
         oneway = if_else(roadclass %in% c("residential","unclassified"),
                          "no",
                          oneway)) |> 
  st_transform(4326)
```

We will use a small subset of the network for this test to speed up the process.

```{r}
#| label: zone4clipping

bog_zone <- zonebuilder::zb_zone("Bogota",
                                 n_circles = 2) |> 
  st_transform(4326)
# zb_view(bog_zone)
```

```{r}
#| label: clipping-net

sf_bogota_2019 <- sf_bogota_2019_full[bog_zone,]
```

## Baseline graph building

```{r}
#| label: graph-building

graph_bogota <- weight_streetnet(sf_bogota_2019,
                                 left_side = F,
                                 wt_profile_file = "custom_wp_speeds.json",
                                 type_col = "way_speed",
                                 wt_profile = "motorcar",
                                 keep_cols = c("way_speed","oneway","oneway.raw","lanes","surface","maxspeed","roadclass"),
                                 turn_penalty = F)

bog_contracted <- graph_bogota |> 
  dodgr_contract_graph()
```

Fixing the weighted time column

```{r}
bog_contracted$time_weighted[bog_contracted$time_weighted==0] <- (3.6*bog_contracted$d_weighted[bog_contracted$time_weighted==0])/case_when(
      bog_contracted$highway[bog_contracted$time_weighted==0] %in% c("trunk_link","primary_link","primary","trunk")~60,
      T~30)
```

Calculating the centrality

```{r}
bog_centrality <- bog_contracted |>
      dodgr_centrality(column = "time_weighted",dist_threshold = 3e3)
```


### Testing a dummy congested graph

```{r}
congested_contracted <- bog_contracted

congested_contracted$time_weighted[congested_contracted$highway == "road_60"] <- (3.6*congested_contracted$d_weighted[congested_contracted$highway == "road_60"])/30
```

Calculating the centrality

```{r}
congested_centrality <- congested_contracted |>
      dodgr_centrality(column = "time_weighted",dist_threshold = 3e3)
```

#### Comparison

```{r}
cent_all <- tibble(edge_id = bog_centrality$edge_id,
                   cent_bl = bog_centrality$centrality) |> 
  left_join(
    tibble(edge_id = congested_centrality$edge_id,
           cent_cong = congested_centrality$centrality),
    by = "edge_id"
  ) |> 
  mutate(
    diff = cent_cong - cent_bl,
    reldiff = diff/cent_bl
  )
```


#### Visualising differences

```{r}
sf_net <- graph_bogota |> 
  dodgr_to_sf() |> 
  left_join(cent_all,by = "edge_id")
```

```{r}
ggplot(cent_all, aes(diff))+
  geom_histogram()
```

```{r}
ggplot(cent_all, aes(reldiff))+
  geom_histogram()+
  scale_x_continuous(limits = c(-1,1))
```

```{r}
sf_net |> 
  mutate(reldiff = if_else(abs(reldiff)>2,
                           NA_real_,
                           reldiff)) |> 
  ggplot(aes(col = reldiff))+
  geom_sf()+
  theme_void()+
  scale_color_gradient2(midpoint = 0,
                        low = "red3",
                        high = "green4",
                        mid = "yellow")
```


## Using the actual speeds for adjusting graph

### Building a correspondence

This section includes the code for joining the speed data network with OSM network

```{r}
#| label: load-data

sf_speed <- st_read("sf_network/sf_speed_network.gpkg") |> st_transform(3116)

sf_speed_clean <- sf_speed[bog_zone |> st_transform(3116) ,]
```


```{r}
road_types <- rev(c(
  "trunk"          ,
  "trunk_link"     ,
  "primary"      ,
  "primary_link"   ,
  "secondary"      ,
  "secondary_link" ,
  "tertiary"       ,
  "tertiary_link"  ,
  "unclassified"   ,
  "residential"    
))

sf_bog_major <- sf_net |>
  mutate(roadclass = factor(roadclass,
                          levels = road_types,
                          ordered = T)) |> 
  filter(as.integer(roadclass)>2,str_detect(roadclass,"link",negate = T)) |> 
  st_transform(3116)
```

```{r}
sf_speed_clean$s.bearing <- stplanr::line_bearing(sf_speed_clean)

speed_buffer <- sf_speed_clean  |>  st_buffer(100,endCapStyle = "FLAT") 
```


```{r}
tm_shape(sf_bog_major[speed_buffer,])+
  tm_lines()+
  tm_shape(speed_buffer)+
  tm_polygons("blue",alpha = 0.3)
```

```{r}
speed_corresp <- st_intersects(speed_buffer,sf_bog_major)

TID_to_edge_id <- do.call(bind_rows,
        lapply(seq_along(speed_corresp),
               \(i) {
                 
                 x <- speed_corresp[[i]]
                 
                 subset_net <- sf_bog_major[x, ]
                 
                 ref_bearing <- speed_buffer$s.bearing[[i]]
                 ref_TID <- speed_buffer$TID[[i]]
                 
                 subset_net$bearing <- stplanr::line_bearing(subset_net)
                 
                 sf_ids <- subset_net |>
                   mutate(bearing_check = round(abs(bearing - ref_bearing))<=15) |>
                   filter(bearing_check) |>
                   pull(edge_id)
                 
                 tibble(TID = ref_TID, edge_id = sf_ids)
                 }
               )
        )
```

```{r}
overlap_buffer <- TID_to_edge_id |> 
  unique() |> 
  count(edge_id) |> 
  arrange(-n) |> 
  filter(n>1)
```

A quick check on the distribution of overlaps

```{r}
overlap_buffer |> 
  ggplot(aes(n))+
  geom_histogram()
```

The following code will produce plots for all links with one-to-many correspondence. However, we will calculate the average of the speed of the observed speeds

```{r}
#| eval: false
for (j in 1:nrow(overlap_buffer)){
  mmap <- tm_shape(speed_buffer[speed_buffer$TID %in% TID_to_edge_id$TID[TID_to_edge_id$edge_id==overlap_buffer$edge_id[j]],])+
    tm_polygons("TID",alpha = 0.3)+
    tm_shape(sf_bog_major[sf_bog_major$edge_id == overlap_buffer$edge_id[j],])+
    tm_lines("yellow")
  print(mmap)
  }
```

To check if there is any link in the speed dataset that has not been linked to any object of the 
road network.

```{r}
no_match_speed <- sf_speed_clean |>
  anti_join(TID_to_edge_id |>
              select(TID) |>
              unique(),
            by = "TID")

nrow(no_match_speed)
```

### loading speed data

```{r}
speed_data <- read_csv("sf_network/summary_speeds.csv")
```

```{r}
min_speed_key <- speed_data |>
  summarise(mean_norm_speed = mean(d_norm_speed),.by = c(year,day_type,hour)) |> 
  slice_min(mean_norm_speed,by = c(year,day_type)) |> 
  filter(year == 2019,day_type == "weekday") |> 
  select(-mean_norm_speed)
```

```{r}
speed_tbl <- speed_data |>
  semi_join(min_speed_key,
            by = join_by(year,day_type,hour)) |> 
  select(TID,d_mean_speed)
```

```{r}
obs_speeds_edges <- TID_to_edge_id |>
  left_join(speed_tbl,by = "TID") |> 
  summarise(obs_speed = mean(d_mean_speed),.by = edge_id)
```

```{r}
bog_contr_adjusted <- bog_contracted

bog_contr_adjusted$obs_speed <- tibble(edge_id = bog_contr_adjusted$edge_id) |> 
  left_join(obs_speeds_edges,by = "edge_id") |> 
  pull(obs_speed)
```


Adjusting the weighted time

```{r}
bog_contr_adjusted$time_weighted[!is.na(bog_contr_adjusted$obs_speed)] <- (3.6*bog_contr_adjusted$d_weighted[!is.na(bog_contr_adjusted$obs_speed)])/bog_contr_adjusted$obs_speed[!is.na(bog_contr_adjusted$obs_speed)]
```

Calculating the centrality

```{r}
congested_centrality <- bog_contr_adjusted |>
      dodgr_centrality(column = "time_weighted",dist_threshold = 3e3)
```

#### Comparison

```{r}
cent_all <- tibble(edge_id = bog_centrality$edge_id,
                   cent_bl = bog_centrality$centrality) |> 
  left_join(
    tibble(edge_id = congested_centrality$edge_id,
           cent_cong = congested_centrality$centrality),
    by = "edge_id"
  ) |> 
  mutate(
    diff = cent_cong - cent_bl,
    reldiff = diff/cent_bl
  )
```

#### Visualising differences

```{r}
sf_net <- graph_bogota |> 
  dodgr_to_sf() |> 
  left_join(cent_all,by = "edge_id")
```

```{r}
ggplot(cent_all, aes(diff))+
  geom_histogram()
```

```{r}
ggplot(cent_all, aes(reldiff))+
  geom_histogram()+
  scale_x_continuous(limits = c(-1,1))
```

```{r}
sf_net |> 
  mutate(reldiff = if_else(abs(reldiff)>2,
                           NA_real_,
                           reldiff)) |> 
  ggplot(aes(col = reldiff))+
  geom_sf()+
  theme_void()+
  scale_color_gradient2(midpoint = 0,
                        low = "red3",
                        high = "green4",
                        mid = "yellow")
```

Saving results for further analysis

```{r}
st_write(sf_net,"sf_network/small_sf_network_cent_results.gpkg",delete_dsn = T)
```

