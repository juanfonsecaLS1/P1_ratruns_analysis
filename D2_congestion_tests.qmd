---
editor: 
  markdown: 
    wrap: 72
---

# Testing changes in centrality

```{r,message=FALSE}
#| label: libraries
#| message: false

options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!require("remotes")) install.packages("remotes")
pkgs = c(
    "sf",
    "tidyverse",
    "zonebuilder",
    "tmap"
    # "dodgr" # Using the developer version of dodgr
)
remotes::install_cran(pkgs)
sapply(pkgs, require, character.only = TRUE)

require(dodgr)
packageVersion ("dodgr")
```

## Loading network

```{r}
#| label: read-sf
 
sf_bogota_2019_raw <- st_read(file.path("sf_network","bogota_osm_network.gpkg"),
                              layer = "network_2019") |>
  mutate(way_speed = case_when(highway %in%
                                 c("trunk_link","primary_link","primary","trunk")~"road_60",
                               TRUE ~ "road_30")) |> 
  rename(roadclass = highway) |>
  # mutate(oneway.raw = oneway,
  #        oneway = if_else(roadclass %in% c("residential","unclassified"),
  #                         "no",
  #                         oneway)) |> 
  st_transform(4326)
```

Inspecting the values of the `oneway` tag in residential and unclassified roads

```{r}
sf_bogota_2019_raw |> filter(roadclass %in% c("residential","unclassified")) |> pull(oneway) |> unique()
```

We will reverse those links to allow the vehicles to `travel` in the wrong direction

```{r}
oneway_minor_rev <- sf_bogota_2019_raw |> 
  filter(roadclass %in% c("residential","unclassified"),
         str_detect(pattern = "yes",oneway)) |> 
  st_reverse() |> 
  mutate(osm_id = paste0(osm_id,"r"),
         way_speed = "road_10")
```

```{r}
sf_bogota_2019_full <- bind_rows(sf_bogota_2019_raw,
                                 oneway_minor_rev)
```

We will use a small subset of the network for this test to speed up the process.

```{r}
#| label: zone4clipping

bog_zone <- zonebuilder::zb_zone("Bogota",
                                 n_circles = 3) |> 
  st_transform(4326)
# zb_view(bog_zone)
```

```{r}
#| label: clipping-net

sf_bogota_2019 <- sf_bogota_2019_full[bog_zone,]
```

## Baseline graph building

```{r}
#| label: graph-building
dodgr::clear_dodgr_cache()

graph_bogota <- weight_streetnet(sf_bogota_2019,
                                 left_side = F,
                                 wt_profile_file = "custom_wp_speeds.json",
                                 type_col = "way_speed",
                                 wt_profile = "motorcar",
                                 keep_cols =
                                   c("way_speed","oneway","lanes","surface","maxspeed","roadclass"),
                                 turn_penalty = F)

main_component <- graph_bogota |> data.frame() |> count(component) |> slice_max(n) |> pull(component)
clear_dodgr_cache()
```


```{r}
bog_contracted <- graph_bogota |> 
  dodgr_contract_graph()
```

As the network might have several components, we can explore the size of the graph.

```{r}
# number of edges
m_edges <- bog_contracted |>data.frame() |> count(component)
# Number of nodes
n_nodes <- bog_contracted |> dodgr_vertices() |> count(component)
```

Fixing the weighted time column

```{r}
dodgr::clear_dodgr_cache()

bog_contracted$time_weighted <- 3.6*bog_contracted$d_weighted/as.numeric(str_extract(bog_contracted$highway,"\\d{1,2}$"))
```

Calculating the centrality

```{r}
bog_centrality <- bog_contracted |>
      dodgr_centrality(column = "time_weighted")
```



### Testing a dummy congested graph

```{r}
congested_contracted <- bog_contracted
dodgr::clear_dodgr_cache()
congested_contracted$time_weighted[congested_contracted$highway == "road_60"] <- (3.6*congested_contracted$d_weighted[congested_contracted$highway == "road_60"])/30
```

Calculating the centrality

```{r}
congested_centrality <- congested_contracted |>
      dodgr_centrality(column = "time_weighted")
```

#### Comparison

```{r}
cent_all <- tibble(edge_id = bog_centrality$edge_id,
                   cent_bl = bog_centrality$centrality) |> 
  left_join(
    tibble(edge_id = congested_centrality$edge_id,
           cent_cong = congested_centrality$centrality),
    by = "edge_id"
  ) |> 
  mutate(
    diff = cent_cong - cent_bl,
    reldiff = diff/(0.5*(cent_bl+cent_cong))
  )
```


#### Visualising differences

Exporting the graph to `sf object`

```{r}
sf_net0 <- graph_bogota |> 
  dodgr_to_sf() 
```

```{r}
sf_net <- sf_net0 |> 
  left_join(cent_all,by = "edge_id")
```

```{r}
ggplot(cent_all, aes(diff))+
  geom_histogram()
```

```{r}
ggplot(cent_all, aes(reldiff))+
  geom_histogram()+
  scale_x_continuous(limits = c(-1,1))
```

```{r}
sf_net |> 
  mutate(reldiff = if_else(abs(reldiff)>2,
                           NA_real_,
                           reldiff)) |> 
  ggplot(aes(col = reldiff))+
  geom_sf()+
  theme_void()+
  scale_color_gradient2(midpoint = 0,
                        low = "red3",
                        high = "green4",
                        mid = "yellow")
```


## Using the actual speeds for adjusting graph

### Building a correspondence

This section includes the code for joining the speed data network with OSM network

```{r}
#| label: load-speed-data-sf

sf_speed <- st_read("sf_network/sf_speed_network.gpkg") |> st_transform(3116)

sf_speed_clean <- sf_speed[bog_zone |> st_transform(3116) ,]
```


```{r}
#| label: pre-process-network-2

road_types <- rev(c(
  "trunk"          ,
  "trunk_link"     ,
  "primary"      ,
  "primary_link"   ,
  "secondary"      ,
  "secondary_link" ,
  "tertiary"       ,
  "tertiary_link"  ,
  "unclassified"   ,
  "residential"    
))

sf_bog_major <- sf_net |>
  mutate(roadclass = factor(roadclass,
                          levels = road_types,
                          ordered = T)) |> 
  filter(as.integer(roadclass)>2,str_detect(roadclass,"link",negate = T)) |> 
  st_transform(3116)
```

Extracting bearings and creating a buffer to produce a correspondence
```{r}
#| label: load-speed-data

sf_speed_clean$s.bearing <- stplanr::line_bearing(sf_speed_clean)

speed_buffer <- sf_speed_clean  |>  st_buffer(100,endCapStyle = "FLAT") 
```

A quick visualisation of the network that could be part of the correspondence

```{r}
#| label: buffer-network-map

tm_shape(sf_bog_major[speed_buffer,])+
  tm_lines()+
  tm_shape(speed_buffer)+
  tm_polygons("blue",alpha = 0.3)
```

using the spatial operation `st_intersects` we select the links that can be related to the buffer.

```{r}
#| label: spatial-operation-corres

speed_corresp <- st_intersects(speed_buffer,sf_bog_major)

TID_to_edge_id <- do.call(bind_rows,
        lapply(seq_along(speed_corresp),
               \(i) {
                 
                 x <- speed_corresp[[i]]
                 
                 subset_net <- sf_bog_major[x, ]
                 
                 ref_bearing <- speed_buffer$s.bearing[[i]]
                 ref_TID <- speed_buffer$TID[[i]]
                 
                 subset_net$bearing <- stplanr::line_bearing(subset_net)
                 
                 sf_ids <- subset_net |>
                   mutate(bearing_check = round(abs(bearing - ref_bearing))<=15) |>
                   filter(bearing_check) |>
                   pull(edge_id)
                 
                 tibble(TID = ref_TID, edge_id = sf_ids)
                 }
               )
        )
```

It is possible that some links in the road network are found to be linked to multiple links in the 
speed network, so we will resolve such situation. First, we identify the overlaps

```{r}
#| label: pre-process-network
overlap_buffer <- TID_to_edge_id |> 
  unique() |> 
  count(edge_id) |> 
  arrange(-n) |> 
  filter(n>1)
```

A quick check on the distribution of overlaps

```{r}
#| label: overlaps-hist

overlap_buffer |> 
  ggplot(aes(n))+
  geom_histogram()
```

The following code will produce plots for all links with one-to-many correspondence. However, we will calculate the average of the speed of the observed speeds

```{r}
#| label: visual-overlaps-check
#| eval: false

# for (j in 1:nrow(overlap_buffer)){
#   mmap <- tm_shape(speed_buffer[speed_buffer$TID %in% TID_to_edge_id$TID[TID_to_edge_id$edge_id==overlap_buffer$edge_id[j]],])+
#     tm_polygons("TID",alpha = 0.3)+
#     tm_shape(sf_bog_major[sf_bog_major$edge_id == overlap_buffer$edge_id[j],])+
#     tm_lines("yellow")
#   print(mmap)
#   }
```

To check if there is any link in the speed dataset that has not been linked to any object of the 
road network.

```{r}
#| label: check-no-correspondence

no_match_speed <- sf_speed_clean |>
  anti_join(TID_to_edge_id |>
              select(TID) |>
              unique(),
            by = "TID")

nrow(no_match_speed)
```

### loading speed data

The following code loads the data

```{r}
#| label: load-speed-summaries

speed_data <- read_csv("sf_network/summary_speeds.csv")
```

We identify the hour that showed the lowest speeds in average

```{r}
#| label: pre-processing-speed1

summary_speed_ratios <- speed_data |>
  summarise(mean_norm_speed = mean(d_norm_speed),.by = c(year,day_type,hour)) 

summary_speed_ratios |>
  filter(year==2019,day_type == "weekday") |>
  arrange(mean_norm_speed) |> 
  head(5)
```

The morning peak is selected as the number of WWD reports is higher. To compare, the speeds for the same hour in a weekend will be extracted

```{r}
#| label: pre-processing-speed2

min_speed_key <- summary_speed_ratios |>  
  filter(year == 2019,day_type == "weekday",hour == 9) |> 
  select(-mean_norm_speed)

wkend_speed_key <- summary_speed_ratios |>  
  filter(year == 2019,day_type == "weekend",hour == 9) |> 
  select(-mean_norm_speed)
```


We will extract the observed speed for the hour we just identified

```{r}
#| label: subset-chosen-TID

speed_tbl <- speed_data |>
  semi_join(min_speed_key,
            by = join_by(year,day_type,hour)) |> 
  select(TID,d_mean_speed)

speed_tbl_wkend <- speed_data |>
  semi_join(wkend_speed_key,
            by = join_by(year,day_type,hour)) |> 
  select(TID,d_mean_speed)
```

We join the speed data to the correspondence we produced before

```{r}
#| label: speed-join

obs_speeds_edges <- TID_to_edge_id |>
  left_join(speed_tbl,by = "TID") |> 
  summarise(obs_speed = mean(d_mean_speed),.by = edge_id)

wkend_speeds_edges <- TID_to_edge_id |>
  left_join(speed_tbl_wkend,by = "TID") |> 
  summarise(obs_speed = mean(d_mean_speed),.by = edge_id)

```

Using the observed speed we recalculate the `time_weighted`.

```{r}
#| label: adjust-graph-table

bog_contr_adjusted <- bog_contracted
dodgr::clear_dodgr_cache()
bog_contr_adjusted$obs_speed <- tibble(edge_id = bog_contr_adjusted$edge_id) |> 
  left_join(obs_speeds_edges,by = "edge_id") |> 
  pull(obs_speed)
dodgr::clear_dodgr_cache()
bog_contr_adjusted$time_weighted[!is.na(bog_contr_adjusted$obs_speed)] <- (3.6*bog_contr_adjusted$d_weighted[!is.na(bog_contr_adjusted$obs_speed)])/bog_contr_adjusted$obs_speed[!is.na(bog_contr_adjusted$obs_speed)]


bog_contr_wkend <- bog_contracted
dodgr::clear_dodgr_cache()
bog_contr_wkend$obs_speed <- tibble(edge_id = bog_contr_wkend$edge_id) |> 
  left_join(obs_speeds_edges,by = "edge_id") |> 
  pull(obs_speed)
dodgr::clear_dodgr_cache()
bog_contr_wkend$time_weighted[!is.na(bog_contr_wkend$obs_speed)] <- (3.6*bog_contr_wkend$d_weighted[!is.na(bog_contr_wkend$obs_speed)])/bog_contr_wkend$obs_speed[!is.na(bog_contr_wkend$obs_speed)]
```

We calculate the centrality for the *congested* graph.

```{r}
#| label: centrality-congested

congested_centrality <- bog_contr_adjusted |>
      dodgr_centrality(column = "time_weighted")
```

#### Comparison

We consolidate the values of free-flow network and congested network into a single dataset

```{r}
#| label: compare-congested-centrality

cent_all <- tibble(edge_id = bog_centrality$edge_id,
                   cent_bl = bog_centrality$centrality) |> 
  left_join(
    tibble(edge_id = congested_centrality$edge_id,
           cent_cong = congested_centrality$centrality),
    by = "edge_id"
  ) |> 
  mutate(
    diff = cent_cong - cent_bl,
    reldiff = diff/(0.5*(cent_bl+cent_cong))
  )
```

#### Visualising differences

The following code produce some quick visualisation of the differences

```{r}
#| label: join-to-spatial

sf_net <- graph_bogota |> 
  dodgr_to_sf() |> 
  left_join(cent_all,by = "edge_id")
```

```{r}
#| label: centrality-distribution-obs

ggplot(cent_all, aes(diff))+
  geom_histogram()
```

```{r}
#| label: centrality-distribution-obs-relative

ggplot(cent_all, aes(reldiff))+
  geom_histogram()+
  scale_x_continuous(limits = c(-2,2))
```

```{r}
#| label: centrality-obs-map

sf_net |> 
  mutate(reldiff = if_else(abs(reldiff)>2,
                           NA_real_,
                           reldiff)) |> 
  ggplot(aes(col = reldiff))+
  geom_sf()+
  theme_void()+
  scale_color_gradient2(midpoint = 0,
                        low = "red3",
                        high = "green4",
                        mid = "yellow")
```

### Distance from major network

The distance from the major network might be related to the reports of traffic offences. For this purpose, we need the following code to obtain the average distance of each minor link to the major network.

Identifying the junctions and classifying them based on the road hierarchy

```{r}
#| label: identifying-nodes-and-classifying

low_hierarchy <- c("residential","unclassified")

junction_class_to <- sf_net |> 
  st_drop_geometry() |> 
  mutate(road_type = if_else(roadclass %in% low_hierarchy,
                             "minor",
                             "major")) |>
  summarise(count = n(),.by = c(to_id,road_type)) |>
  pivot_wider(names_from = road_type,values_from = count)|> 
  rename(id = to_id)

junction_class_from <- sf_net |> 
  st_drop_geometry() |> 
  mutate(road_type = if_else(roadclass %in% low_hierarchy,
                             "minor",
                             "major")) |> 
  summarise(count = n(),.by = c(from_id,road_type)) |>
  pivot_wider(names_from = road_type,values_from = count) |>
  rename(id = from_id)

junctions_classed <- junction_class_to |> 
  full_join(junction_class_from,by = "id",suffix = c(".to",".from")) |> 
  mutate(jct_type = case_when(is.na(minor.to)&is.na(minor.from)~"major",
                              is.na(major.to)&is.na(major.from)~"minor",
                              (!is.na(minor.to)&!is.na(major.from))|
                                (!is.na(minor.from)&!is.na(major.to))~"minmaj")) |> 
  select(-starts_with("m"))
  
```

Calculating the network distance for all nodes in the minor network to the major network 

```{r}
#| label: distance-to-major-network

minmaj_ids <- junctions_classed |> filter(jct_type == "minmaj") |> pull(id)
minor_from_ids <- junctions_classed |> filter(jct_type == "minor") |> pull(id)

dist_matrix <- dodgr_dists(bog_contracted,
                           from = minor_from_ids,
                           to = minmaj_ids,
                           shortest = T)
```

```{r}
#| label: check of errors
length(colSums(dist_matrix)[is.na(colSums(dist_matrix,na.rm = T))])
```

```{r}
#| label: consolidate-distances

fastest_all <- tibble(
  id.jct = minor_from_ids,
  dist.jct =
    apply(dist_matrix, 1,\(x) min(x,na.rm = TRUE)
      )
  )
```


```{r}
#| label: join-to-main-dataset

sf_net_jct <- sf_net0 |>
  left_join(fastest_all,
            by = c("from_id"="id.jct"),
            relationship = "many-to-one") |> 
  mutate(dist.jct = case_when(is.na(dist.jct)&roadclass %in% low_hierarchy ~ 0,
                              is.infinite(dist.jct)~NA,
                              T~dist.jct))
```


## Tests for Wrong Direction speed


### Free-flow network

We assumed an initial speed of 10 km/h for the links that represent the wrong direction. But that choice is arbitrary. The following section will produce the results for multiple speeds, to compare the changes in centrality based on the assumed fre-flow speed of wrong-way links. 
First, we will test the changes on the free-flow network

```{r}
test_centralities <- do.call(bind_cols,
                             lapply(seq(0, 30, 1), \(v) {
                               bog_ff_test <- bog_contracted
                               dodgr::clear_dodgr_cache()
                               bog_ff_test$time_weighted[bog_ff_test$highway == "road_10"] <- (3.6 *
                                                                                                 bog_ff_test$d_weighted[bog_ff_test$highway == "road_10"]) / v
                               test_centrality <- bog_ff_test |>
                                 dodgr_centrality(column = "time_weighted")
                               
                               
                               t <- tibble(cent = test_centrality$centrality)
                               names(t) <- paste0("cent_", v)
                               return(t)
                             }))
```

Visualising the impact of the assigned speed on centrality distribution across the network (top)

```{r}
test_centralities |>
  pivot_longer(cols = any_of(names(test_centralities)),
               names_prefix = "cent_") |>
  mutate(name = as.integer(name)) |> 
  ggplot(aes(x = factor(name),y = value+1))+
  geom_boxplot(outlier.shape = NA)+
  scale_y_log10()+
  labs(title = "Centrality distribution",
       x = "WWD links assigned speed")
  

tibble(highway = bog_contracted[,c("highway")]) |> 
  bind_cols(test_centralities) |> 
  filter(highway == "road_10") |> 
  pivot_longer(-highway,names_prefix = "cent_") |>
  mutate(name = as.integer(name)) |> 
  ggplot(aes(x = factor(name),y = value+1))+
  geom_boxplot(outlier.shape = NA)+
  scale_y_log10()+
  labs(title = "Centrality distribution (only WW-links)",
       x = "WWD links assigned speed")
```


### Congested network

```{r}
test_centralities_cong <- do.call(bind_cols,
                             lapply(seq(0, 30, 1), \(v) {
                               bog_ff_test <- bog_contr_adjusted 
                               
                               dodgr::clear_dodgr_cache()
                               bog_ff_test$time_weighted[bog_ff_test$highway == "road_10"] <- (3.6 * bog_ff_test$d_weighted[bog_ff_test$highway == "road_10"]) / v
                               
                               
                               test_centrality <- bog_ff_test |>
                                 dodgr_centrality(column = "time_weighted")
                               
                               
                               t <- tibble(cent = test_centrality$centrality)
                               names(t) <- paste0("cent_", v)
                               return(t)
                               
                             }))
```

Visualising the impact of the assigned speed on centrality distribution across the network (top)

```{r}
test_centralities_cong |>
  pivot_longer(cols = any_of(names(test_centralities_cong)),
               names_prefix = "cent_") |>
  mutate(name = as.integer(name)) |> 
  ggplot(aes(x = factor(name),y = value+1))+
  geom_boxplot(outlier.shape = NA)+
  scale_y_log10()+
  labs(title = "Centrality distribution",
       x = "WWD links assigned speed")
  

tibble(highway = bog_contr_adjusted[,c("highway")]) |> 
  bind_cols(test_centralities_cong) |> 
  filter(highway == "road_10") |> 
  pivot_longer(-highway,names_prefix = "cent_") |>
  mutate(name = as.integer(name)) |> 
  ggplot(aes(x = factor(name),y = value+1))+
  geom_boxplot(outlier.shape = NA)+
  scale_y_log10()+
  labs(title = "Centrality distribution (only WW-links)",
       x = "WWD links assigned speed")
```

### Comparison

```{r}
wwlinks <- bind_cols(
  tibble(highway = bog_contr_adjusted[, c("highway")]) |>
    bind_cols(test_centralities_cong) |>
    filter(highway == "road_10") |>
    pivot_longer(-highway, names_prefix = "cent_",
                 values_to = "ff_cent"),
  tibble(highway = bog_contracted[, c("highway")]) |>
    bind_cols(test_centralities) |>
    filter(highway == "road_10") |>
    pivot_longer(-highway, names_prefix = "cent_",
                 values_to = "cong_cent")
)
  
```

A simple linear model
```{r}
m1 <- lm(ff_cent~cong_cent+0, data = wwlinks)
summary(m1)
```

```{r}
wwlinks |>
  mutate(name = as.integer(name...2),
         sign = (cong_cent-ff_cent)/abs(cong_cent-ff_cent)) |>
  ggplot(aes(x = factor(name),y = abs(cong_cent-ff_cent),fill = factor(sign)))+
  geom_boxplot(outlier.shape = NA)+
  scale_y_log10()+
  labs(title = "Centrality distribution (only WW-links)",
       x = "WWD links assigned speed")
```

```{r}
wwlinks |>
  mutate(name = as.integer(name...2),
         sign = (cong_cent-ff_cent)/abs(cong_cent-ff_cent)) |>
  ggplot(aes(x = factor(name),y = abs(cong_cent-ff_cent)/(0.5*(cong_cent+ff_cent)),fill = factor(sign)))+
  geom_boxplot(outlier.shape = NA)+
  scale_y_log10()+
  labs(title = "Centrality distribution (only WW-links)",
       x = "WWD links assigned speed")
```

## Tests for distance threshold

```{r}
# t_thresholds = round(30*1.2^seq(0,30,2),-1) |> unique()
t_thresholds = seq(1,25,3)*60

grid_test <- expand_grid(v = seq(0, 30, 3),
                         th = t_thresholds)
```


```{r}
#| eval: false
test_centralities_threshold <- do.call(bind_cols,
                                       lapply(1:nrow(grid_test),
                                              # lapply(1:2,
                                              \(i) {
                                                bog_ff_test <- bog_contracted
                                                bog_cong_test <- bog_contr_adjusted
                                                
                                                dodgr::clear_dodgr_cache()
                                                
                                                bog_ff_test$time_weighted[bog_ff_test$highway == "road_10"] <-
                                                  (3.6 * bog_ff_test$d_weighted[bog_ff_test$highway == "road_10"]) / grid_test$v[i]
                                                
                                                bog_cong_test$time_weighted[bog_cong_test$highway == "road_10"] <-
                                                  (3.6 * bog_cong_test$d_weighted[bog_cong_test$highway == "road_10"]) / grid_test$v[i]
                                                
                                                dodgr::clear_dodgr_cache()
                                                
                                                # Centrality calculations
                                                
                                                test_centrality_ff <- bog_ff_test |>
                                                  dodgr_centrality(column = "time_weighted",
                                                                   dist_threshold = grid_test$th[i])
                                                
                                                test_centrality <- bog_cong_test |>
                                                  dodgr_centrality(column = "time_weighted",
                                                                   dist_threshold = grid_test$th[i])
                                                
                                                
                                                t <-
                                                  tibble(cent.ff = test_centrality_ff$centrality,
                                                         cent.cong = test_centrality$centrality)
                                                
                                                names(t) <-
                                                  paste(names(t), grid_test$v[i], grid_test$th[i], sep = "_")
                                                
                                                return(t)
                                                
                                              }))
```



```{r}
#| eval: false
test_centralities_threshold_wkend <- do.call(bind_cols,
                                             lapply(1:nrow(grid_test),
                                                    # lapply(1:2,
                                                    \(i) {
                                                bog_ff_test <- bog_contracted
                                                bog_cong_test <- bog_contr_wkend
                                                
                                                dodgr::clear_dodgr_cache()
                                                
                                                bog_ff_test$time_weighted[bog_ff_test$highway == "road_10"] <-
                                                  (3.6 * bog_ff_test$d_weighted[bog_ff_test$highway == "road_10"]) / grid_test$v[i]
                                                
                                                bog_cong_test$time_weighted[bog_cong_test$highway == "road_10"] <-
                                                  (3.6 * bog_cong_test$d_weighted[bog_cong_test$highway == "road_10"]) / grid_test$v[i]
                                                
                                                dodgr::clear_dodgr_cache()
                                                
                                                # Centrality calculations
                                                
                                                test_centrality_ff <- bog_ff_test |>
                                                  dodgr_centrality(column = "time_weighted",
                                                                   dist_threshold = grid_test$th[i])
                                                
                                                test_centrality <- bog_cong_test |>
                                                  dodgr_centrality(column = "time_weighted",
                                                                   dist_threshold = grid_test$th[i])
                                                
                                                
                                                t <-
                                                  tibble(cent.ff = test_centrality_ff$centrality,
                                                         cent.cong = test_centrality$centrality)
                                                
                                                names(t) <-
                                                  paste(names(t), grid_test$v[i], grid_test$th[i], sep = "_")
                                                
                                                return(t)
                                                
                                              }))
```

```{r}
#| eval: false
#| include: false

test_centralities_threshold$edge_id <- bog_contr_adjusted$edge_id
test_centralities_threshold_wkend$edge_id <- bog_contr_wkend$edge_id
save(test_centralities_threshold,test_centralities_threshold_wkend,file = "sf_network/test_cent_thresholds.rdata")
save(test_centralities_threshold_wkend,file = "sf_network/test_cent_thresholds_wkend.rdata")
```

```{r}
#| include: false

load(file = "sf_network/test_cent_thresholds.rdata")
load(file = "sf_network/test_cent_thresholds_wkend.rdata")
```

```{r}
tidy_test <- test_centralities_threshold |>
  pivot_longer(-edge_id,
               names_to = "test",
               values_to = "cent",names_prefix = "cent.") |> 
  separate_wider_delim(test,delim = "_",names = c("network","wwd.speed","dist.th")) |> 
  pivot_wider(names_from = network,values_from = cent) |>
  left_join(tibble(edge_id = bog_contracted$edge_id,
       component = bog_contracted$component) |> 
  left_join(n_nodes, by = join_by(component)),
  by = join_by(edge_id)
  ) |> 
  mutate(diff = cong - ff,
         logdiff = sign(diff)*log10(abs(diff)),
         reldiff = diff/(0.5*(ff+cong)),
         logreldiff.ff = sign(diff)*log10(abs(diff/(ff+n-1)))) |> 
  mutate(across(c(logdiff,logreldiff.ff),\(x) if_else(diff == 0 & (ff+cong > 0),0,x))) |> 
  select(-n,-component)

tidy_test_wkend <- test_centralities_threshold_wkend |>
  pivot_longer(-edge_id,
               names_to = "test",
               values_to = "cent",names_prefix = "cent.") |> 
  separate_wider_delim(test,delim = "_",names = c("network","wwd.speed","dist.th")) |> 
  pivot_wider(names_from = network,values_from = cent) |>
  left_join(tibble(edge_id = bog_contracted$edge_id,
       component = bog_contracted$component) |> 
  left_join(n_nodes, by = join_by(component)),
  by = join_by(edge_id)
  ) |> 
  mutate(diff = cong - ff,
         logdiff = sign(diff)*log10(abs(diff)),
         reldiff = diff/(0.5*(ff+cong)),
         logreldiff.ff = sign(diff)*log10(abs(diff/(ff+n-1)))) |> 
  mutate(across(c(logdiff,logreldiff.ff),\(x) if_else(diff == 0 & (ff+cong > 0),0,x))) |> 
  select(-n,-component)
```

Exploration of distributions for the entire network

```{r}
tidy_test |>
  arrange(dist.th) |> 
  mutate(across(wwd.speed:dist.th,as.integer)) |> 
  ggplot(aes(x = factor(wwd.speed), y = reldiff))+
  geom_boxplot()+
  facet_wrap(dist.th~.)
```

For one-way residential links
```{r}
tidy_test |>
  left_join(tibble(edge_id = bog_contr_adjusted$edge_id,
                   highway = bog_contr_adjusted$highway)) |> 
  filter(highway =="road_10") |> 
  mutate(across(wwd.speed:dist.th,as.integer)) |> 
  ggplot(aes(x = factor(wwd.speed), y = reldiff))+
  geom_boxplot()+
  facet_wrap(dist.th~.)
```

```{r}

tidy_test |>
  left_join(tibble(edge_id = bog_contr_adjusted$edge_id,
                   highway = bog_contr_adjusted$highway)) |> 
  filter(highway =="road_10") |> 
  mutate(across(wwd.speed:dist.th,as.integer)) |> 
  ggplot(aes(x = factor(wwd.speed), y = logreldiff.ff))+
  geom_boxplot()+
  facet_wrap(dist.th~.)
```

```{r}
sample_ids <- bog_contr_adjusted |>
  data.frame() |>
  filter(highway =="road_10") |>
  pull(edge_id) |>
  sample(15)


tidy_test |>
  left_join(tibble(edge_id = bog_contr_adjusted$edge_id,
                   highway = bog_contr_adjusted$highway)) |> 
  filter(highway =="road_10",edge_id %in% sample_ids) |> 
  mutate(across(wwd.speed:dist.th,as.integer)) |> 
  ggplot(aes(x = dist.th,
             y = logdiff,
             group = factor(edge_id),col = factor(edge_id)))+
  geom_line(alpha = 0.3)+
  theme_minimal()+
  facet_wrap(wwd.speed~.)+
  scale_x_continuous(breaks = t_thresholds,labels = round(t_thresholds/60,1))+
  theme(panel.grid.minor.x = element_blank(),
        axis.text.x = element_text(angle = 90))
```



```{r}
#| label: save-results
write_csv(tidy_test, file = "sf_network/cent_tests.csv")
write_csv(tidy_test_wkend, file = "sf_network/cent_tests_wkend.csv")

st_write(sf_net_jct, "sf_network/small_sf_network.gpkg",delete_dsn = T)
```

