---
editor: 
  markdown: 
    wrap: 72
---
# Extracting OSM networks {#sec-extrosm}

```{r,message=FALSE}
#| label: libraries
#| message: false

options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!require("remotes")) install.packages("remotes")
pkgs = c(
    "sf",
    "tidyverse",
    "osmextract",
    "rvest",
    "paletteer"
)
remotes::install_cran(pkgs)
sapply(pkgs, require, character.only = TRUE)
```

For this study, we will use
[OpenStreetMap](https://www.openstreetmap.org/) to obtain the road
network data. First, we will download a spatial data file with the urban
perimeter of Bogotá from [Datos Abiertos de Bogotá (Bogotá's Open Data
platform)](https://datosabiertos.bogota.gov.co/dataset/12a704ee-e5bb-4c5d-bad6-a5069d12f90a).

```{r}
#| label: get-perimeter

dir.create("raw_data",showWarnings = F)

if(!file.exists(file.path("raw_data", "perimetrourbano.gpkg"))) {
  u <- "https://datosabiertos.bogota.gov.co/dataset/12a704ee-e5bb-4c5d-bad6-a5069d12f90a/resource/bfc61e3c-fa58-4fe7-9581-7ead66c494cb/download/perimetrourbano.gpkg"
  download.file(u, file.path("raw_data", basename(u)), mode = "wb")
}

urban_perimeter <- st_read("raw_data/perimetrourbano.gpkg")
```

We will use the `osmextract` package to get OSM data in R. Please note
that we will be using previous versions of the OSM data, as the network
might have changed in recent years. For example, some sections of the
roads are currently closed (2024) due to the works for the first metro
line in Bogotá. We will use OSM networks for end of 2019 (January 1st,
2020) and 2020 (January 1st, 2021).

First, we produce a boundary box for an area covering the urban
perimeter and the neighbouring municipalities. This is done by producing
a buffer of 20 km around Bogotá.

```{r}
#| label: bbox-bog

bbox_bogota <- urban_perimeter |>
  st_buffer(dist = 20e3) |> 
  st_bbox() |>
  st_as_sfc() |>
  st_transform(crs = 4326)
```

We obtain the `url` of the `pbf` file in
[Geofabrik](https://www.geofabrik.de/) which contains the area we are
interested in.

```{r}
#| label: osm-match

bog_match <- oe_match(bbox_bogota,provider = "geofabrik")
```

The following code obtains the names of the files with the older
versions of the OSM data and downloads the 2019 and 2020 `pbf` files.

```{r}
#| label: download-data
#| message: false

u <- dirname(bog_match$url)
f <- basename(bog_match$url)

id_files <- gsub("latest\\.osm\\.pbf",replacement = "",f)

files_table <- (rvest::read_html(u) |> html_table())[[1]]

available_versions <- files_table$Name[grep(paste0(id_files,"\\d{6}\\.osm\\.pbf$"),
                                            files_table$Name)]


net_match_19 <- grep("200101",available_versions)
net_match_20 <- grep("210101",available_versions)

net_options <- osmextract:::load_options_driving(NA_character_)

net_options$extra_tags <- c("oneway","lanes","surface","maxspeed",net_options$extra_tags)

net_old_200101 <- do.call(oe_read,
                          c(file_path = paste0(u,"/",available_versions[net_match_19]),
                            net_options[2:4]
                     )
                   )

net_old_210101 <- do.call(oe_read,
                          c(file_path = paste0(u,"/",available_versions[net_match_20]),
                            net_options[2:4]
                     )
                   )
```

Once we have downloaded the data. We can clean and clip the network by
using the boundary box we produced and by filtering only relevant road
links (see the `road_types` vector).

```{r}
#| label: clip-clean-networks

road_types <- c("tertiary"       ,
  "residential"    ,
  "primary_link"   ,
  "primary"      ,
  "secondary"      ,
  "trunk"          ,
  "trunk_link"     ,
  # "service"      ,
  "secondary_link" ,
  "unclassified"   ,
  "tertiary_link"  
  # "living_street"
  # "track"          ,
  # "busway"         ,
  # "raceway"
)

osm_bogota_200101 <- net_old_200101[bbox_bogota,] |>
  filter(highway %in% road_types) |> st_transform(st_crs(urban_perimeter))

osm_bogota_210101 <- net_old_210101[bbox_bogota,] |>
  filter(highway %in% road_types) |> st_transform(st_crs(urban_perimeter))

rm(net_old_200101,net_old_210101)
```

## A quick Visualisation of the network

```{r}
net_2019_map <- osm_bogota_200101[urban_perimeter,] |> 
  mutate(highway = str_remove(highway, "_link") |> str_to_sentence()) |>
  mutate(highway = factor(highway,
                          levels = c("Trunk",
                                     "Primary",
                                     "Secondary",
                                     "Tertiary",
                                     "Residential",
                                     "Unclassified"),
                          ordered = T)) |>
  ggplot(
     aes(linewidth = highway)
    )+
  geom_sf(aes(col = highway))+
  # scale_color_viridis_c(direction = -1)+
  scale_linewidth_manual(values = c(1.7,1.5,1.4,1.2,0.7,0.7)/5)+
  # scale_linewidth_continuous(range = c(0.05,0.3),transform = scales::transform_boxcox(p = 2))+
  scale_color_manual(values =  paletteer_d("ggsci::lanonc_lancet",n = 7))+
  theme_void()+
  guides(linewidth = "none",)+
  labs(col = "Road Class")+
  theme(legend.position = "inside",
        legend.position.inside = c(0.0,0.8),
        text = element_text(family = "Roboto Condensed"),
        legend.key.width = unit(3, "mm"))

net_2019_map  
```

```{r}
#| eval: false
#| include: false

ggsave(plot = net_2019_map,units = "cm",dpi = 330,width = 10,height = 12,filename = "network_map.png")
```

```{r}
#| eval: false
#| include: false

lwds <- c(1.7,1.5,1.4,1.2,0.5,0.5)/5.5

net_2019_tm <- osm_bogota_200101[urban_perimeter,] |> 
  mutate(highway = str_remove(highway, "_link") |> str_to_sentence()) |>
  mutate(highway = factor(highway,
                          levels = c("Trunk",
                                     "Primary",
                                     "Secondary",
                                     "Tertiary",
                                     "Residential",
                                     "Unclassified"),
                          ordered = T)) |>
  mutate(highway.lwd = lwds[as.integer(highway)]) |> 
  arrange(highway) |> 
  tm_shape(relative = T,xlim = c(-.4,1))+
  tm_lines(lwd = "highway.lwd",
           lwd.legend = NULL,
           col = "highway",
           col.scale = tm_scale_categorical(values = paletteer_d("ggsci::lanonc_lancet",n = 7)),
           col.legend = tm_legend(title = "Road class", position = tm_pos_in(),frame = F))
  
tmap_save(tm = net_2019_tm,filename = "map_tm_network.png",units = "cm",height = 12,width = 10)
```


## Save network in `sf` format

Finally, we save the `sf` objects as GeoPackages.

```{r}
#| label: write-sf

dir.create("sf_network",showWarnings = F)
st_write(osm_bogota_200101,
         file.path("sf_network","bogota_osm_network.gpkg"),
         delete_dsn = F,
         layer = "network_2019",
         delete_layer = T)
st_write(osm_bogota_210101,
         file.path("sf_network","bogota_osm_network.gpkg"),
         delete_dsn = F,
         layer = "network_2020",
         delete_layer = T)
```

