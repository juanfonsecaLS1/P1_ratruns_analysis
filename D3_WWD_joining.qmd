---
editor: 
  markdown: 
    wrap: 72
---

# Joining the WWD reports

```{r,message=FALSE}
#| label: libraries
#| message: false

options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!require("remotes")) install.packages("remotes")
pkgs = c(
    "sf",
    "tidyverse",
    "zonebuilder",
    "tmap"
    # "dodgr" # Using the developer version of dodgr
)
remotes::install_cran(pkgs)
sapply(pkgs, require, character.only = TRUE)
```



```{r}
#| label: zone4clipping

bog_zone <- zonebuilder::zb_zone("Bogota",
                                 n_circles = 2) |> 
  st_transform(4326)
# zb_view(bog_zone)
```

### WWD reports

```{r}
wwd_sf <- st_read("sf_network/wwd_clean_sf.gpkg")
```


```{r}
sf_net <- st_read("sf_network/small_sf_network_cent_results.gpkg")
```

### Assigning reports to the network

We need to assign the reports to the network. As we are interested in the residential roads, any bi-directional road is represented in the `sf` object as two objects. Since we do not have information to know which specific direction the reports correspond to, we will need to simplify the spatial object. Our target variable is the betweenness centrality, so we are going to keep the two centrality values for each bi-directional element.


First, we will create a subset of the `residential` and `unclassified` roads 

```{r}
subset_net <- sf_net |> 
  filter(roadclass %in% c(
    "residential",
    "unclassified"
    )) |> 
  st_transform(3116)
```

From this subset, we first find the pairs of links with the `st_contains` function. 


```{r}
simplifed_net_indexes <- lapply(st_contains(subset_net,subset_net),
            \(x){
              x[order(x)]
}) |> unique()
```

Each pair is then assigned a unique id.

```{r}
simp_groups <- do.call(bind_rows,
        lapply(seq_along(simplifed_net_indexes),
               \(i){
                 tibble(id = simplifed_net_indexes[[i]],
                        pair_id = i)
               })) |> 
  arrange(id)


subset_net$pair_id <- simp_groups$pair_id
```

Using the `pair_id` we extract the minimum, maximum and average change in centrality for each pair.

```{r}
summary_pairs <- subset_net |>
  st_drop_geometry() |>
  summarise(across(diff:reldiff,
                   list(min=min, max=max, avg = mean)),
            .by = pair_id)
```

A simplified version of the `sf` object is produced extracting the first element of each pair,
we discard will the columns with the centrality metrics from this object to avoid confusion

```{r}
simpl_network_sf <- subset_net[vapply(simplifed_net_indexes,\(x) x[1],numeric(1)),] |> select(lanes:component,pair_id)
```

We can take a quick look at the results of the simplified network

```{r}
summary_pairs |> 
  ggplot() + 
  geom_histogram(aes(reldiff_min),alpha = 0.3,fill = "dodgerblue2",binwidth = 0.05)+
  geom_histogram(aes(reldiff_max),alpha = 0.3,fill = "firebrick3",binwidth = 0.05)+
  geom_histogram(aes(reldiff_avg),alpha = 0.3,fill = "darkgreen",binwidth = 0.05)+
  scale_x_continuous(limits = c(-2,2))+
  theme_minimal()
  
```


We are interested in the reports on residential and unclassified streets. For this, we will create a buffer. It is uncertain how the coordinates of each report are recorded, there might be some error associated with the use of GPS devices, and also, some uncertainty in the way the officers do it.

```{r}
subset_buffer <- simpl_network_sf |> 
  st_union()  |> 
  st_buffer(20)
```

A subset of the reports during peak hour +/- 2 hours

```{r}
subset_wwd <- (wwd_sf |> filter(abs(hour - 18)<=2) |> st_transform(3116))[subset_buffer,]|> 
             filter(year==2019)
```



```{r}
tmap_mode("view")

tm_shape(subset_buffer)+
  tm_polygons("gray60",alpha = 0.6)+
  tm_shape(subset_wwd)+
  tm_dots()

tmap_mode("plot")
```


### Finding the closest element of the network

```{r}
subset_wwd$near_index <- st_nearest_feature(subset_wwd,simpl_network_sf)
subset_wwd$pair_id <- simpl_network_sf$pair_id[subset_wwd$near_index]
```


```{r}

min_offset <- 1 - min(summary_pairs$reldiff_min,na.rm = T)

summary_pairs |>
  mutate(bool = pair_id %in% subset_wwd$pair_id,
         reldiff_avg = reldiff_avg + min_offset,
         reldiff_max = reldiff_max + min_offset) |> 
  ggplot(aes(x = reldiff_avg,
             y = reldiff_max,
             alpha = bool,
             col = bool,
             shape = bool))+
  geom_hline(yintercept = min_offset,linetype = "dashed", col = "gray30") +
  geom_vline(xintercept = min_offset,linetype = "dashed", col = "gray30") +
  geom_point()+
  scale_x_log10(
    breaks = scales::trans_breaks("log10", function(x)
      10 ^ x),
    labels = scales::trans_format("log10", scales::math_format(10 ^ .x)))+
  scale_y_log10(
    breaks = scales::trans_breaks("log10", function(x)
      10 ^ x),
    labels = scales::trans_format("log10", scales::math_format(10 ^ .x)))+
  scale_colour_manual(values = c("gray70","dodgerblue4"))+
  scale_alpha_manual(values = c(0.05,1))+
  coord_fixed() +
  theme_minimal()
```

```{r}
simpl_network_sf |>
  filter(pair_id %in% subset_wwd$pair_id) |> 
  mutate(oneway.raw = if_else(is.na(oneway.raw),"no",oneway.raw),
         oneway.raw = str_detect(oneway.raw,"(yes|Yes|YES)")) |>
  ggplot(aes(oneway.raw))+
  geom_bar()
```

```{r}
simpl_network_sf |> 
  mutate(oneway.raw = if_else(is.na(oneway.raw),"no",oneway.raw),
         oneway.raw = str_detect(oneway.raw,"(yes|Yes|YES)")) |> 
  ggplot(aes(col = oneway.raw))+
  geom_sf()+
  theme_void()
```

```{r}
simpl_network_sf |> 
  mutate(oneway.raw = if_else(is.na(oneway.raw),"no",oneway.raw),
         oneway.raw = str_detect(oneway.raw,"(yes|Yes|YES)")) |> 
  filter(oneway.raw) |> 
  left_join(summary_pairs,by = "pair_id") |> 
  mutate(wwd_bool = pair_id %in% subset_wwd$pair_id) |> 
  ggplot(aes(x = log10(reldiff_max),y = wwd_bool,size = log10(abs(diff_max))))+
    geom_point(alpha = 0.3)
```



